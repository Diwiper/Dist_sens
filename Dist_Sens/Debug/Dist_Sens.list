
Dist_Sens.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  08003b18  08003b18  00004b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048dc  080048dc  00006070  2**0
                  CONTENTS
  4 .ARM          00000000  080048dc  080048dc  00006070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048dc  080048dc  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048dc  080048dc  000058dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048e0  080048e0  000058e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080048e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  20000070  08004954  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  08004954  000066a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad65  00000000  00000000  00006099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b00  00000000  00000000  00010dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00012900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017ab8  00000000  00000000  00013578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ebe5  00000000  00000000  0002b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a69c  00000000  00000000  00039c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000c42b1  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000009b3  00000000  00000000  000c42f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a94  00000000  00000000  000c4ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000c873c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b00 	.word	0x08003b00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003b00 	.word	0x08003b00

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr
 800092c:	0000      	movs	r0, r0
	...

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b598      	push	{r3, r4, r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f000 fdaa 	bl	800148c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f8c0 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 f982 	bl	8000c44 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000940:	f000 f902 	bl	8000b48 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000944:	f000 f92e 	bl	8000ba4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000948:	4851      	ldr	r0, [pc, #324]	@ (8000a90 <main+0x160>)
 800094a:	f002 f9b5 	bl	8002cb8 <HAL_TIM_Base_Start>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000954:	484f      	ldr	r0, [pc, #316]	@ (8000a94 <main+0x164>)
 8000956:	f001 f89e 	bl	8001a96 <HAL_GPIO_WritePin>
    ssd1306_Init(&hi2c1);
 800095a:	484f      	ldr	r0, [pc, #316]	@ (8000a98 <main+0x168>)
 800095c:	f000 f9e8 	bl	8000d30 <ssd1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000966:	484b      	ldr	r0, [pc, #300]	@ (8000a94 <main+0x164>)
 8000968:	f001 f895 	bl	8001a96 <HAL_GPIO_WritePin>
	    __HAL_TIM_SET_COUNTER(&htim1, 0);
 800096c:	4b48      	ldr	r3, [pc, #288]	@ (8000a90 <main+0x160>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	@ 0x24
	    while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000974:	bf00      	nop
 8000976:	4b46      	ldr	r3, [pc, #280]	@ (8000a90 <main+0x160>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800097c:	2b09      	cmp	r3, #9
 800097e:	d9fa      	bls.n	8000976 <main+0x46>
	    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000986:	4843      	ldr	r0, [pc, #268]	@ (8000a94 <main+0x164>)
 8000988:	f001 f885 	bl	8001a96 <HAL_GPIO_WritePin>

	    pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 800098c:	f000 fdd6 	bl	800153c <HAL_GetTick>
 8000990:	4603      	mov	r3, r0
 8000992:	4a42      	ldr	r2, [pc, #264]	@ (8000a9c <main+0x16c>)
 8000994:	6013      	str	r3, [r2, #0]
	    // wait for the echo pin to go high
	    while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000996:	bf00      	nop
 8000998:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800099c:	483d      	ldr	r0, [pc, #244]	@ (8000a94 <main+0x164>)
 800099e:	f001 f863 	bl	8001a68 <HAL_GPIO_ReadPin>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d108      	bne.n	80009ba <main+0x8a>
 80009a8:	4b3c      	ldr	r3, [pc, #240]	@ (8000a9c <main+0x16c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f103 040a 	add.w	r4, r3, #10
 80009b0:	f000 fdc4 	bl	800153c <HAL_GetTick>
 80009b4:	4603      	mov	r3, r0
 80009b6:	429c      	cmp	r4, r3
 80009b8:	d8ee      	bhi.n	8000998 <main+0x68>
	    Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 80009ba:	4b35      	ldr	r3, [pc, #212]	@ (8000a90 <main+0x160>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c0:	4a37      	ldr	r2, [pc, #220]	@ (8000aa0 <main+0x170>)
 80009c2:	6013      	str	r3, [r2, #0]

	    pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80009c4:	f000 fdba 	bl	800153c <HAL_GetTick>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a34      	ldr	r2, [pc, #208]	@ (8000a9c <main+0x16c>)
 80009cc:	6013      	str	r3, [r2, #0]
	    // wait for the echo pin to go low
	    while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 80009ce:	bf00      	nop
 80009d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009d4:	482f      	ldr	r0, [pc, #188]	@ (8000a94 <main+0x164>)
 80009d6:	f001 f847 	bl	8001a68 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d008      	beq.n	80009f2 <main+0xc2>
 80009e0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a9c <main+0x16c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 80009e8:	f000 fda8 	bl	800153c <HAL_GetTick>
 80009ec:	4603      	mov	r3, r0
 80009ee:	429c      	cmp	r4, r3
 80009f0:	d8ee      	bhi.n	80009d0 <main+0xa0>
	    Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 80009f2:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <main+0x160>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f8:	4a2a      	ldr	r2, [pc, #168]	@ (8000aa4 <main+0x174>)
 80009fa:	6013      	str	r3, [r2, #0]

	    Distance = (Value2-Value1)* 0.034/2;
 80009fc:	4b29      	ldr	r3, [pc, #164]	@ (8000aa4 <main+0x174>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b27      	ldr	r3, [pc, #156]	@ (8000aa0 <main+0x170>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fce4 	bl	80003d4 <__aeabi_ui2d>
 8000a0c:	a31e      	add	r3, pc, #120	@ (adr r3, 8000a88 <main+0x158>)
 8000a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a12:	f7ff fd59 	bl	80004c8 <__aeabi_dmul>
 8000a16:	4602      	mov	r2, r0
 8000a18:	460b      	mov	r3, r1
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f04f 0200 	mov.w	r2, #0
 8000a22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a26:	f7ff fe79 	bl	800071c <__aeabi_ddiv>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	f7ff ff5b 	bl	80008ec <__aeabi_d2uiz>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <main+0x178>)
 8000a3c:	801a      	strh	r2, [r3, #0]

	    ssd1306_SetCursor(0, 0);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2000      	movs	r0, #0
 8000a42:	f000 fbef 	bl	8001224 <ssd1306_SetCursor>
	    ssd1306_WriteString (strDistance, Font_11x18, White);
 8000a46:	4a19      	ldr	r2, [pc, #100]	@ (8000aac <main+0x17c>)
 8000a48:	2301      	movs	r3, #1
 8000a4a:	ca06      	ldmia	r2, {r1, r2}
 8000a4c:	4818      	ldr	r0, [pc, #96]	@ (8000ab0 <main+0x180>)
 8000a4e:	f000 fbc3 	bl	80011d8 <ssd1306_WriteString>
	    sprintf(strCopy,"%d    ", Distance);
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <main+0x178>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	4916      	ldr	r1, [pc, #88]	@ (8000ab4 <main+0x184>)
 8000a5a:	4817      	ldr	r0, [pc, #92]	@ (8000ab8 <main+0x188>)
 8000a5c:	f002 fba0 	bl	80031a0 <siprintf>
	    ssd1306_SetCursor (0, 30);
 8000a60:	211e      	movs	r1, #30
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 fbde 	bl	8001224 <ssd1306_SetCursor>
	    ssd1306_WriteString (strCopy, Font_11x18, White);
 8000a68:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <main+0x17c>)
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	ca06      	ldmia	r2, {r1, r2}
 8000a6e:	4812      	ldr	r0, [pc, #72]	@ (8000ab8 <main+0x188>)
 8000a70:	f000 fbb2 	bl	80011d8 <ssd1306_WriteString>
	    ssd1306_UpdateScreen(&hi2c1);
 8000a74:	4808      	ldr	r0, [pc, #32]	@ (8000a98 <main+0x168>)
 8000a76:	f000 fa9d 	bl	8000fb4 <ssd1306_UpdateScreen>
	    HAL_Delay(50);
 8000a7a:	2032      	movs	r0, #50	@ 0x32
 8000a7c:	f000 fd68 	bl	8001550 <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000a80:	e76e      	b.n	8000960 <main+0x30>
 8000a82:	bf00      	nop
 8000a84:	f3af 8000 	nop.w
 8000a88:	b020c49c 	.word	0xb020c49c
 8000a8c:	3fa16872 	.word	0x3fa16872
 8000a90:	200000e0 	.word	0x200000e0
 8000a94:	40010800 	.word	0x40010800
 8000a98:	2000008c 	.word	0x2000008c
 8000a9c:	20000128 	.word	0x20000128
 8000aa0:	2000012c 	.word	0x2000012c
 8000aa4:	20000130 	.word	0x20000130
 8000aa8:	20000134 	.word	0x20000134
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	08003b18 	.word	0x08003b18
 8000ab8:	20000138 	.word	0x20000138

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b090      	sub	sp, #64	@ 0x40
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0318 	add.w	r3, r7, #24
 8000ac6:	2228      	movs	r2, #40	@ 0x28
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fb88 	bl	80031e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ae6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aec:	2301      	movs	r3, #1
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af0:	2302      	movs	r3, #2
 8000af2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000afa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	4618      	mov	r0, r3
 8000b06:	f001 fc8b 	bl	8002420 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b10:	f000 f8f0 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fef8 	bl	8002924 <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b3a:	f000 f8db 	bl	8000cf4 <Error_Handler>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3740      	adds	r7, #64	@ 0x40
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <MX_I2C1_Init+0x50>)
 8000b4e:	4a13      	ldr	r2, [pc, #76]	@ (8000b9c <MX_I2C1_Init+0x54>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_I2C1_Init+0x50>)
 8000b54:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <MX_I2C1_Init+0x58>)
 8000b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <MX_I2C1_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <MX_I2C1_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <MX_I2C1_Init+0x50>)
 8000b66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <MX_I2C1_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <MX_I2C1_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b78:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <MX_I2C1_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <MX_I2C1_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <MX_I2C1_Init+0x50>)
 8000b86:	f000 ff9f 	bl	8001ac8 <HAL_I2C_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b90:	f000 f8b0 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000008c 	.word	0x2000008c
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	00061a80 	.word	0x00061a80

08000ba4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c40 <MX_TIM1_Init+0x9c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bc8:	2247      	movs	r2, #71	@ 0x47
 8000bca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be0:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bec:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bee:	f002 f813 	bl	8002c18 <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 f87c 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4619      	mov	r1, r3
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000c0a:	f002 f89f 	bl	8002d4c <HAL_TIM_ConfigClockSource>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c14:	f000 f86e 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000c26:	f002 fa5d 	bl	80030e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c30:	f000 f860 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200000e0 	.word	0x200000e0
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c58:	4b24      	ldr	r3, [pc, #144]	@ (8000cec <MX_GPIO_Init+0xa8>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a23      	ldr	r2, [pc, #140]	@ (8000cec <MX_GPIO_Init+0xa8>)
 8000c5e:	f043 0320 	orr.w	r3, r3, #32
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <MX_GPIO_Init+0xa8>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0320 	and.w	r3, r3, #32
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <MX_GPIO_Init+0xa8>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a1d      	ldr	r2, [pc, #116]	@ (8000cec <MX_GPIO_Init+0xa8>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <MX_GPIO_Init+0xa8>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <MX_GPIO_Init+0xa8>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <MX_GPIO_Init+0xa8>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <MX_GPIO_Init+0xa8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ca6:	4812      	ldr	r0, [pc, #72]	@ (8000cf0 <MX_GPIO_Init+0xac>)
 8000ca8:	f000 fef5 	bl	8001a96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480b      	ldr	r0, [pc, #44]	@ (8000cf0 <MX_GPIO_Init+0xac>)
 8000cc2:	f000 fd4d 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <MX_GPIO_Init+0xac>)
 8000ce0:	f000 fd3e 	bl	8001760 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <Error_Handler+0x8>

08000d00 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af04      	add	r7, sp, #16
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000d0c:	230a      	movs	r3, #10
 8000d0e:	9302      	str	r3, [sp, #8]
 8000d10:	2301      	movs	r3, #1
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	1cfb      	adds	r3, r7, #3
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2178      	movs	r1, #120	@ 0x78
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f001 f816 	bl	8001d50 <HAL_I2C_Mem_Write>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8000d38:	2064      	movs	r0, #100	@ 0x64
 8000d3a:	f000 fc09 	bl	8001550 <HAL_Delay>
    int status = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8000d42:	21ae      	movs	r1, #174	@ 0xae
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ffdb 	bl	8000d00 <ssd1306_WriteCommand>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8000d54:	2120      	movs	r1, #32
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ffd2 	bl	8000d00 <ssd1306_WriteCommand>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d66:	2110      	movs	r1, #16
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ffc9 	bl	8000d00 <ssd1306_WriteCommand>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4413      	add	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000d78:	21b0      	movs	r1, #176	@ 0xb0
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffc0 	bl	8000d00 <ssd1306_WriteCommand>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8000d8a:	21c8      	movs	r1, #200	@ 0xc8
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ffb7 	bl	8000d00 <ssd1306_WriteCommand>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4413      	add	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffae 	bl	8000d00 <ssd1306_WriteCommand>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8000dae:	2110      	movs	r1, #16
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ffa5 	bl	8000d00 <ssd1306_WriteCommand>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8000dc0:	2140      	movs	r1, #64	@ 0x40
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ff9c 	bl	8000d00 <ssd1306_WriteCommand>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8000dd2:	2181      	movs	r1, #129	@ 0x81
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff93 	bl	8000d00 <ssd1306_WriteCommand>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4413      	add	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8000de4:	21ff      	movs	r1, #255	@ 0xff
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff8a 	bl	8000d00 <ssd1306_WriteCommand>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8000df6:	21a1      	movs	r1, #161	@ 0xa1
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff81 	bl	8000d00 <ssd1306_WriteCommand>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4413      	add	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8000e08:	21a6      	movs	r1, #166	@ 0xa6
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff78 	bl	8000d00 <ssd1306_WriteCommand>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8000e1a:	21a8      	movs	r1, #168	@ 0xa8
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff6f 	bl	8000d00 <ssd1306_WriteCommand>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4413      	add	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8000e2c:	213f      	movs	r1, #63	@ 0x3f
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff66 	bl	8000d00 <ssd1306_WriteCommand>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e3e:	21a4      	movs	r1, #164	@ 0xa4
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff5d 	bl	8000d00 <ssd1306_WriteCommand>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8000e50:	21d3      	movs	r1, #211	@ 0xd3
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff54 	bl	8000d00 <ssd1306_WriteCommand>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8000e62:	2100      	movs	r1, #0
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff4b 	bl	8000d00 <ssd1306_WriteCommand>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000e74:	21d5      	movs	r1, #213	@ 0xd5
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff42 	bl	8000d00 <ssd1306_WriteCommand>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8000e86:	21f0      	movs	r1, #240	@ 0xf0
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff39 	bl	8000d00 <ssd1306_WriteCommand>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8000e98:	21d9      	movs	r1, #217	@ 0xd9
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff30 	bl	8000d00 <ssd1306_WriteCommand>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8000eaa:	2122      	movs	r1, #34	@ 0x22
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff27 	bl	8000d00 <ssd1306_WriteCommand>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4413      	add	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8000ebc:	21da      	movs	r1, #218	@ 0xda
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff1e 	bl	8000d00 <ssd1306_WriteCommand>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8000ece:	2112      	movs	r1, #18
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff15 	bl	8000d00 <ssd1306_WriteCommand>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4413      	add	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8000ee0:	21db      	movs	r1, #219	@ 0xdb
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff0c 	bl	8000d00 <ssd1306_WriteCommand>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff03 	bl	8000d00 <ssd1306_WriteCommand>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4413      	add	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8000f04:	218d      	movs	r1, #141	@ 0x8d
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fefa 	bl	8000d00 <ssd1306_WriteCommand>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4413      	add	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8000f16:	2114      	movs	r1, #20
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff fef1 	bl	8000d00 <ssd1306_WriteCommand>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4413      	add	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000f28:	21af      	movs	r1, #175	@ 0xaf
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fee8 	bl	8000d00 <ssd1306_WriteCommand>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <ssd1306_Init+0x214>
        return 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e00f      	b.n	8000f64 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 f813 	bl	8000f70 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f832 	bl	8000fb4 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <ssd1306_Init+0x23c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000f56:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <ssd1306_Init+0x23c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <ssd1306_Init+0x23c>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	715a      	strb	r2, [r3, #5]

    return 0;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000548 	.word	0x20000548

08000f70 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	e00d      	b.n	8000f9c <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <ssd1306_Fill+0x1a>
 8000f86:	2100      	movs	r1, #0
 8000f88:	e000      	b.n	8000f8c <ssd1306_Fill+0x1c>
 8000f8a:	21ff      	movs	r1, #255	@ 0xff
 8000f8c:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <ssd1306_Fill+0x40>)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	460a      	mov	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fa2:	d3ed      	bcc.n	8000f80 <ssd1306_Fill+0x10>
    }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	20000148 	.word	0x20000148

08000fb4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e020      	b.n	8001004 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	3b50      	subs	r3, #80	@ 0x50
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fe98 	bl	8000d00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff fe94 	bl	8000d00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8000fd8:	2110      	movs	r1, #16
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fe90 	bl	8000d00 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	01db      	lsls	r3, r3, #7
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <ssd1306_UpdateScreen+0x60>)
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2264      	movs	r2, #100	@ 0x64
 8000fea:	9202      	str	r2, [sp, #8]
 8000fec:	2280      	movs	r2, #128	@ 0x80
 8000fee:	9201      	str	r2, [sp, #4]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2240      	movs	r2, #64	@ 0x40
 8000ff6:	2178      	movs	r1, #120	@ 0x78
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 fea9 	bl	8001d50 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	3301      	adds	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b07      	cmp	r3, #7
 8001008:	d9db      	bls.n	8000fc2 <ssd1306_UpdateScreen+0xe>
    }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000148 	.word	0x20000148

08001018 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	460b      	mov	r3, r1
 8001024:	71bb      	strb	r3, [r7, #6]
 8001026:	4613      	mov	r3, r2
 8001028:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db48      	blt.n	80010c4 <ssd1306_DrawPixel+0xac>
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	2b3f      	cmp	r3, #63	@ 0x3f
 8001036:	d845      	bhi.n	80010c4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001038:	4b25      	ldr	r3, [pc, #148]	@ (80010d0 <ssd1306_DrawPixel+0xb8>)
 800103a:	791b      	ldrb	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001040:	797b      	ldrb	r3, [r7, #5]
 8001042:	2b00      	cmp	r3, #0
 8001044:	bf0c      	ite	eq
 8001046:	2301      	moveq	r3, #1
 8001048:	2300      	movne	r3, #0
 800104a:	b2db      	uxtb	r3, r3
 800104c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 800104e:	797b      	ldrb	r3, [r7, #5]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d11a      	bne.n	800108a <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001054:	79fa      	ldrb	r2, [r7, #7]
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	08db      	lsrs	r3, r3, #3
 800105a:	b2d8      	uxtb	r0, r3
 800105c:	4603      	mov	r3, r0
 800105e:	01db      	lsls	r3, r3, #7
 8001060:	4413      	add	r3, r2
 8001062:	4a1c      	ldr	r2, [pc, #112]	@ (80010d4 <ssd1306_DrawPixel+0xbc>)
 8001064:	5cd3      	ldrb	r3, [r2, r3]
 8001066:	b25a      	sxtb	r2, r3
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	2101      	movs	r1, #1
 8001070:	fa01 f303 	lsl.w	r3, r1, r3
 8001074:	b25b      	sxtb	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b259      	sxtb	r1, r3
 800107a:	79fa      	ldrb	r2, [r7, #7]
 800107c:	4603      	mov	r3, r0
 800107e:	01db      	lsls	r3, r3, #7
 8001080:	4413      	add	r3, r2
 8001082:	b2c9      	uxtb	r1, r1
 8001084:	4a13      	ldr	r2, [pc, #76]	@ (80010d4 <ssd1306_DrawPixel+0xbc>)
 8001086:	54d1      	strb	r1, [r2, r3]
 8001088:	e01d      	b.n	80010c6 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	b2d8      	uxtb	r0, r3
 8001092:	4603      	mov	r3, r0
 8001094:	01db      	lsls	r3, r3, #7
 8001096:	4413      	add	r3, r2
 8001098:	4a0e      	ldr	r2, [pc, #56]	@ (80010d4 <ssd1306_DrawPixel+0xbc>)
 800109a:	5cd3      	ldrb	r3, [r2, r3]
 800109c:	b25a      	sxtb	r2, r3
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	2101      	movs	r1, #1
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	4013      	ands	r3, r2
 80010b2:	b259      	sxtb	r1, r3
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	4603      	mov	r3, r0
 80010b8:	01db      	lsls	r3, r3, #7
 80010ba:	4413      	add	r3, r2
 80010bc:	b2c9      	uxtb	r1, r1
 80010be:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <ssd1306_DrawPixel+0xbc>)
 80010c0:	54d1      	strb	r1, [r2, r3]
 80010c2:	e000      	b.n	80010c6 <ssd1306_DrawPixel+0xae>
        return;
 80010c4:	bf00      	nop
    }
}
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000548 	.word	0x20000548
 80010d4:	20000148 	.word	0x20000148

080010d8 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b089      	sub	sp, #36	@ 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4604      	mov	r4, r0
 80010e0:	1d38      	adds	r0, r7, #4
 80010e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80010e6:	461a      	mov	r2, r3
 80010e8:	4623      	mov	r3, r4
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	4613      	mov	r3, r2
 80010ee:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80010f0:	4b38      	ldr	r3, [pc, #224]	@ (80011d4 <ssd1306_WriteChar+0xfc>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	793b      	ldrb	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80010fc:	dc06      	bgt.n	800110c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80010fe:	4b35      	ldr	r3, [pc, #212]	@ (80011d4 <ssd1306_WriteChar+0xfc>)
 8001100:	885b      	ldrh	r3, [r3, #2]
 8001102:	461a      	mov	r2, r3
 8001104:	797b      	ldrb	r3, [r7, #5]
 8001106:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001108:	2b3f      	cmp	r3, #63	@ 0x3f
 800110a:	dd01      	ble.n	8001110 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 800110c:	2300      	movs	r3, #0
 800110e:	e05c      	b.n	80011ca <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	e04c      	b.n	80011b0 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3b20      	subs	r3, #32
 800111c:	7979      	ldrb	r1, [r7, #5]
 800111e:	fb01 f303 	mul.w	r3, r1, r3
 8001122:	4619      	mov	r1, r3
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	440b      	add	r3, r1
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	e034      	b.n	80011a0 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d012      	beq.n	800116c <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001146:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <ssd1306_WriteChar+0xfc>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4413      	add	r3, r2
 8001152:	b2d8      	uxtb	r0, r3
 8001154:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <ssd1306_WriteChar+0xfc>)
 8001156:	885b      	ldrh	r3, [r3, #2]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	4413      	add	r3, r2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	7bba      	ldrb	r2, [r7, #14]
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff ff57 	bl	8001018 <ssd1306_DrawPixel>
 800116a:	e016      	b.n	800119a <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <ssd1306_WriteChar+0xfc>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b2d8      	uxtb	r0, r3
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <ssd1306_WriteChar+0xfc>)
 800117c:	885b      	ldrh	r3, [r3, #2]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4413      	add	r3, r2
 8001186:	b2d9      	uxtb	r1, r3
 8001188:	7bbb      	ldrb	r3, [r7, #14]
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	f7ff ff3f 	bl	8001018 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	3301      	adds	r3, #1
 800119e:	61bb      	str	r3, [r7, #24]
 80011a0:	793b      	ldrb	r3, [r7, #4]
 80011a2:	461a      	mov	r2, r3
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d3c5      	bcc.n	8001136 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3301      	adds	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	797b      	ldrb	r3, [r7, #5]
 80011b2:	461a      	mov	r2, r3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d3ad      	bcc.n	8001116 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <ssd1306_WriteChar+0xfc>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	793a      	ldrb	r2, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <ssd1306_WriteChar+0xfc>)
 80011c6:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000548 	.word	0x20000548

080011d8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	1d38      	adds	r0, r7, #4
 80011e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80011e6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80011e8:	e012      	b.n	8001210 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	7818      	ldrb	r0, [r3, #0]
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	1d3a      	adds	r2, r7, #4
 80011f2:	ca06      	ldmia	r2, {r1, r2}
 80011f4:	f7ff ff70 	bl	80010d8 <ssd1306_WriteChar>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d002      	beq.n	800120a <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	e008      	b.n	800121c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3301      	adds	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1e8      	bne.n	80011ea <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	781b      	ldrb	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	4613      	mov	r3, r2
 8001232:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <ssd1306_SetCursor+0x2c>)
 800123a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	b29a      	uxth	r2, r3
 8001240:	4b03      	ldr	r3, [pc, #12]	@ (8001250 <ssd1306_SetCursor+0x2c>)
 8001242:	805a      	strh	r2, [r3, #2]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000548 	.word	0x20000548

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_MspInit+0x5c>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	4a14      	ldr	r2, [pc, #80]	@ (80012b0 <HAL_MspInit+0x5c>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6193      	str	r3, [r2, #24]
 8001266:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <HAL_MspInit+0x5c>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <HAL_MspInit+0x5c>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a0e      	ldr	r2, [pc, #56]	@ (80012b0 <HAL_MspInit+0x5c>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800127c:	61d3      	str	r3, [r2, #28]
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <HAL_MspInit+0x5c>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800128a:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <HAL_MspInit+0x60>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <HAL_MspInit+0x60>)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000

080012b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a15      	ldr	r2, [pc, #84]	@ (8001328 <HAL_I2C_MspInit+0x70>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d123      	bne.n	8001320 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b14      	ldr	r3, [pc, #80]	@ (800132c <HAL_I2C_MspInit+0x74>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a13      	ldr	r2, [pc, #76]	@ (800132c <HAL_I2C_MspInit+0x74>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <HAL_I2C_MspInit+0x74>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012f0:	23c0      	movs	r3, #192	@ 0xc0
 80012f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f4:	2312      	movs	r3, #18
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4619      	mov	r1, r3
 8001302:	480b      	ldr	r0, [pc, #44]	@ (8001330 <HAL_I2C_MspInit+0x78>)
 8001304:	f000 fa2c 	bl	8001760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <HAL_I2C_MspInit+0x74>)
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	4a07      	ldr	r2, [pc, #28]	@ (800132c <HAL_I2C_MspInit+0x74>)
 800130e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001312:	61d3      	str	r3, [r2, #28]
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_I2C_MspInit+0x74>)
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40005400 	.word	0x40005400
 800132c:	40021000 	.word	0x40021000
 8001330:	40010c00 	.word	0x40010c00

08001334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a09      	ldr	r2, [pc, #36]	@ (8001368 <HAL_TIM_Base_MspInit+0x34>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d10b      	bne.n	800135e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_TIM_Base_MspInit+0x38>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HAL_TIM_Base_MspInit+0x38>)
 800134c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_TIM_Base_MspInit+0x38>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	40012c00 	.word	0x40012c00
 800136c:	40021000 	.word	0x40021000

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <NMI_Handler+0x4>

08001378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <MemManage_Handler+0x4>

08001388 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <UsageFault_Handler+0x4>

08001398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c0:	f000 f8aa 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4a14      	ldr	r2, [pc, #80]	@ (8001424 <_sbrk+0x5c>)
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <_sbrk+0x60>)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013dc:	4b13      	ldr	r3, [pc, #76]	@ (800142c <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <_sbrk+0x64>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <_sbrk+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d207      	bcs.n	8001408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f8:	f001 fefa 	bl	80031f0 <__errno>
 80013fc:	4603      	mov	r3, r0
 80013fe:	220c      	movs	r2, #12
 8001400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e009      	b.n	800141c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001408:	4b08      	ldr	r3, [pc, #32]	@ (800142c <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140e:	4b07      	ldr	r3, [pc, #28]	@ (800142c <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <_sbrk+0x64>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20005000 	.word	0x20005000
 8001428:	00000400 	.word	0x00000400
 800142c:	20000550 	.word	0x20000550
 8001430:	200006a0 	.word	0x200006a0

08001434 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001440:	f7ff fff8 	bl	8001434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480b      	ldr	r0, [pc, #44]	@ (8001474 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001446:	490c      	ldr	r1, [pc, #48]	@ (8001478 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001448:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <LoopFillZerobss+0x16>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a09      	ldr	r2, [pc, #36]	@ (8001480 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800145c:	4c09      	ldr	r4, [pc, #36]	@ (8001484 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146a:	f001 fec7 	bl	80031fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800146e:	f7ff fa5f 	bl	8000930 <main>
  bx lr
 8001472:	4770      	bx	lr
  ldr r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001478:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800147c:	080048e4 	.word	0x080048e4
  ldr r2, =_sbss
 8001480:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001484:	200006a0 	.word	0x200006a0

08001488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC1_2_IRQHandler>
	...

0800148c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <HAL_Init+0x28>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	@ (80014b4 <HAL_Init+0x28>)
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f92b 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	200f      	movs	r0, #15
 80014a4:	f000 f808 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff fed4 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40022000 	.word	0x40022000

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f935 	bl	8001746 <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 f90b 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000014 	.word	0x20000014
 8001510:	2000001c 	.word	0x2000001c
 8001514:	20000018 	.word	0x20000018

08001518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <HAL_IncTick+0x1c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <HAL_IncTick+0x20>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a03      	ldr	r2, [pc, #12]	@ (8001538 <HAL_IncTick+0x20>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	2000001c 	.word	0x2000001c
 8001538:	20000554 	.word	0x20000554

0800153c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b02      	ldr	r3, [pc, #8]	@ (800154c <HAL_GetTick+0x10>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	20000554 	.word	0x20000554

08001550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff fff0 	bl	800153c <HAL_GetTick>
 800155c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001568:	d005      	beq.n	8001576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <HAL_Delay+0x44>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4413      	add	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001576:	bf00      	nop
 8001578:	f7ff ffe0 	bl	800153c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	429a      	cmp	r2, r3
 8001586:	d8f7      	bhi.n	8001578 <HAL_Delay+0x28>
  {
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000001c 	.word	0x2000001c

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	@ (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	@ (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	@ 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	@ 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff90 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff49 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff5e 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff90 	bl	8001650 <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5f 	bl	80015fc <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffb0 	bl	80016b4 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b08b      	sub	sp, #44	@ 0x2c
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001772:	e169      	b.n	8001a48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001774:	2201      	movs	r2, #1
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	429a      	cmp	r2, r3
 800178e:	f040 8158 	bne.w	8001a42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4a9a      	ldr	r2, [pc, #616]	@ (8001a00 <HAL_GPIO_Init+0x2a0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d05e      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 800179c:	4a98      	ldr	r2, [pc, #608]	@ (8001a00 <HAL_GPIO_Init+0x2a0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d875      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017a2:	4a98      	ldr	r2, [pc, #608]	@ (8001a04 <HAL_GPIO_Init+0x2a4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d058      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017a8:	4a96      	ldr	r2, [pc, #600]	@ (8001a04 <HAL_GPIO_Init+0x2a4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d86f      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017ae:	4a96      	ldr	r2, [pc, #600]	@ (8001a08 <HAL_GPIO_Init+0x2a8>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d052      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017b4:	4a94      	ldr	r2, [pc, #592]	@ (8001a08 <HAL_GPIO_Init+0x2a8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d869      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017ba:	4a94      	ldr	r2, [pc, #592]	@ (8001a0c <HAL_GPIO_Init+0x2ac>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d04c      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017c0:	4a92      	ldr	r2, [pc, #584]	@ (8001a0c <HAL_GPIO_Init+0x2ac>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d863      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017c6:	4a92      	ldr	r2, [pc, #584]	@ (8001a10 <HAL_GPIO_Init+0x2b0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d046      	beq.n	800185a <HAL_GPIO_Init+0xfa>
 80017cc:	4a90      	ldr	r2, [pc, #576]	@ (8001a10 <HAL_GPIO_Init+0x2b0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d85d      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017d2:	2b12      	cmp	r3, #18
 80017d4:	d82a      	bhi.n	800182c <HAL_GPIO_Init+0xcc>
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d859      	bhi.n	800188e <HAL_GPIO_Init+0x12e>
 80017da:	a201      	add	r2, pc, #4	@ (adr r2, 80017e0 <HAL_GPIO_Init+0x80>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	0800185b 	.word	0x0800185b
 80017e4:	08001835 	.word	0x08001835
 80017e8:	08001847 	.word	0x08001847
 80017ec:	08001889 	.word	0x08001889
 80017f0:	0800188f 	.word	0x0800188f
 80017f4:	0800188f 	.word	0x0800188f
 80017f8:	0800188f 	.word	0x0800188f
 80017fc:	0800188f 	.word	0x0800188f
 8001800:	0800188f 	.word	0x0800188f
 8001804:	0800188f 	.word	0x0800188f
 8001808:	0800188f 	.word	0x0800188f
 800180c:	0800188f 	.word	0x0800188f
 8001810:	0800188f 	.word	0x0800188f
 8001814:	0800188f 	.word	0x0800188f
 8001818:	0800188f 	.word	0x0800188f
 800181c:	0800188f 	.word	0x0800188f
 8001820:	0800188f 	.word	0x0800188f
 8001824:	0800183d 	.word	0x0800183d
 8001828:	08001851 	.word	0x08001851
 800182c:	4a79      	ldr	r2, [pc, #484]	@ (8001a14 <HAL_GPIO_Init+0x2b4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001832:	e02c      	b.n	800188e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	623b      	str	r3, [r7, #32]
          break;
 800183a:	e029      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	3304      	adds	r3, #4
 8001842:	623b      	str	r3, [r7, #32]
          break;
 8001844:	e024      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	3308      	adds	r3, #8
 800184c:	623b      	str	r3, [r7, #32]
          break;
 800184e:	e01f      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	330c      	adds	r3, #12
 8001856:	623b      	str	r3, [r7, #32]
          break;
 8001858:	e01a      	b.n	8001890 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001862:	2304      	movs	r3, #4
 8001864:	623b      	str	r3, [r7, #32]
          break;
 8001866:	e013      	b.n	8001890 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d105      	bne.n	800187c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001870:	2308      	movs	r3, #8
 8001872:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	611a      	str	r2, [r3, #16]
          break;
 800187a:	e009      	b.n	8001890 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800187c:	2308      	movs	r3, #8
 800187e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	615a      	str	r2, [r3, #20]
          break;
 8001886:	e003      	b.n	8001890 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x130>
          break;
 800188e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2bff      	cmp	r3, #255	@ 0xff
 8001894:	d801      	bhi.n	800189a <HAL_GPIO_Init+0x13a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	e001      	b.n	800189e <HAL_GPIO_Init+0x13e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3304      	adds	r3, #4
 800189e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2bff      	cmp	r3, #255	@ 0xff
 80018a4:	d802      	bhi.n	80018ac <HAL_GPIO_Init+0x14c>
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	e002      	b.n	80018b2 <HAL_GPIO_Init+0x152>
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ae:	3b08      	subs	r3, #8
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	210f      	movs	r1, #15
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	401a      	ands	r2, r3
 80018c4:	6a39      	ldr	r1, [r7, #32]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	431a      	orrs	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80b1 	beq.w	8001a42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001a18 <HAL_GPIO_Init+0x2b8>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001a18 <HAL_GPIO_Init+0x2b8>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6193      	str	r3, [r2, #24]
 80018ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001a18 <HAL_GPIO_Init+0x2b8>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f8:	4a48      	ldr	r2, [pc, #288]	@ (8001a1c <HAL_GPIO_Init+0x2bc>)
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001904:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a40      	ldr	r2, [pc, #256]	@ (8001a20 <HAL_GPIO_Init+0x2c0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d013      	beq.n	800194c <HAL_GPIO_Init+0x1ec>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a3f      	ldr	r2, [pc, #252]	@ (8001a24 <HAL_GPIO_Init+0x2c4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d00d      	beq.n	8001948 <HAL_GPIO_Init+0x1e8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a28 <HAL_GPIO_Init+0x2c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d007      	beq.n	8001944 <HAL_GPIO_Init+0x1e4>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a3d      	ldr	r2, [pc, #244]	@ (8001a2c <HAL_GPIO_Init+0x2cc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d101      	bne.n	8001940 <HAL_GPIO_Init+0x1e0>
 800193c:	2303      	movs	r3, #3
 800193e:	e006      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 8001940:	2304      	movs	r3, #4
 8001942:	e004      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 8001944:	2302      	movs	r3, #2
 8001946:	e002      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 800194c:	2300      	movs	r3, #0
 800194e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001950:	f002 0203 	and.w	r2, r2, #3
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	4093      	lsls	r3, r2
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800195e:	492f      	ldr	r1, [pc, #188]	@ (8001a1c <HAL_GPIO_Init+0x2bc>)
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	3302      	adds	r3, #2
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001978:	4b2d      	ldr	r3, [pc, #180]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	492c      	ldr	r1, [pc, #176]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
 8001984:	e006      	b.n	8001994 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001986:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	43db      	mvns	r3, r3
 800198e:	4928      	ldr	r1, [pc, #160]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 8001990:	4013      	ands	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019a0:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	4922      	ldr	r1, [pc, #136]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ae:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	491e      	ldr	r1, [pc, #120]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4918      	ldr	r1, [pc, #96]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019d6:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	43db      	mvns	r3, r3
 80019de:	4914      	ldr	r1, [pc, #80]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d021      	beq.n	8001a34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	490e      	ldr	r1, [pc, #56]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
 80019fc:	e021      	b.n	8001a42 <HAL_GPIO_Init+0x2e2>
 80019fe:	bf00      	nop
 8001a00:	10320000 	.word	0x10320000
 8001a04:	10310000 	.word	0x10310000
 8001a08:	10220000 	.word	0x10220000
 8001a0c:	10210000 	.word	0x10210000
 8001a10:	10120000 	.word	0x10120000
 8001a14:	10110000 	.word	0x10110000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010000 	.word	0x40010000
 8001a20:	40010800 	.word	0x40010800
 8001a24:	40010c00 	.word	0x40010c00
 8001a28:	40011000 	.word	0x40011000
 8001a2c:	40011400 	.word	0x40011400
 8001a30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a34:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <HAL_GPIO_Init+0x304>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	4909      	ldr	r1, [pc, #36]	@ (8001a64 <HAL_GPIO_Init+0x304>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	3301      	adds	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f47f ae8e 	bne.w	8001774 <HAL_GPIO_Init+0x14>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	372c      	adds	r7, #44	@ 0x2c
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	40010400 	.word	0x40010400

08001a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e001      	b.n	8001a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	807b      	strh	r3, [r7, #2]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa6:	787b      	ldrb	r3, [r7, #1]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aac:	887a      	ldrh	r2, [r7, #2]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ab2:	e003      	b.n	8001abc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	041a      	lsls	r2, r3, #16
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	611a      	str	r2, [r3, #16]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e12b      	b.n	8001d32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fbe2 	bl	80012b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2224      	movs	r2, #36	@ 0x24
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b2c:	f001 f842 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8001b30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a81      	ldr	r2, [pc, #516]	@ (8001d3c <HAL_I2C_Init+0x274>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d807      	bhi.n	8001b4c <HAL_I2C_Init+0x84>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4a80      	ldr	r2, [pc, #512]	@ (8001d40 <HAL_I2C_Init+0x278>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	bf94      	ite	ls
 8001b44:	2301      	movls	r3, #1
 8001b46:	2300      	movhi	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	e006      	b.n	8001b5a <HAL_I2C_Init+0x92>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4a7d      	ldr	r2, [pc, #500]	@ (8001d44 <HAL_I2C_Init+0x27c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	bf94      	ite	ls
 8001b54:	2301      	movls	r3, #1
 8001b56:	2300      	movhi	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0e7      	b.n	8001d32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4a78      	ldr	r2, [pc, #480]	@ (8001d48 <HAL_I2C_Init+0x280>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	0c9b      	lsrs	r3, r3, #18
 8001b6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	4a6a      	ldr	r2, [pc, #424]	@ (8001d3c <HAL_I2C_Init+0x274>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d802      	bhi.n	8001b9c <HAL_I2C_Init+0xd4>
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	e009      	b.n	8001bb0 <HAL_I2C_Init+0xe8>
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	4a69      	ldr	r2, [pc, #420]	@ (8001d4c <HAL_I2C_Init+0x284>)
 8001ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	3301      	adds	r3, #1
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001bc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	495c      	ldr	r1, [pc, #368]	@ (8001d3c <HAL_I2C_Init+0x274>)
 8001bcc:	428b      	cmp	r3, r1
 8001bce:	d819      	bhi.n	8001c04 <HAL_I2C_Init+0x13c>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1e59      	subs	r1, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bde:	1c59      	adds	r1, r3, #1
 8001be0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001be4:	400b      	ands	r3, r1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00a      	beq.n	8001c00 <HAL_I2C_Init+0x138>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1e59      	subs	r1, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfe:	e051      	b.n	8001ca4 <HAL_I2C_Init+0x1dc>
 8001c00:	2304      	movs	r3, #4
 8001c02:	e04f      	b.n	8001ca4 <HAL_I2C_Init+0x1dc>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d111      	bne.n	8001c30 <HAL_I2C_Init+0x168>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1e58      	subs	r0, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	440b      	add	r3, r1
 8001c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	e012      	b.n	8001c56 <HAL_I2C_Init+0x18e>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1e58      	subs	r0, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	0099      	lsls	r1, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c46:	3301      	adds	r3, #1
 8001c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf0c      	ite	eq
 8001c50:	2301      	moveq	r3, #1
 8001c52:	2300      	movne	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_I2C_Init+0x196>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e022      	b.n	8001ca4 <HAL_I2C_Init+0x1dc>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10e      	bne.n	8001c84 <HAL_I2C_Init+0x1bc>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1e58      	subs	r0, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6859      	ldr	r1, [r3, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	440b      	add	r3, r1
 8001c74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c82:	e00f      	b.n	8001ca4 <HAL_I2C_Init+0x1dc>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1e58      	subs	r0, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	0099      	lsls	r1, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	6809      	ldr	r1, [r1, #0]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001cd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6911      	ldr	r1, [r2, #16]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68d2      	ldr	r2, [r2, #12]
 8001cde:	4311      	orrs	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	000186a0 	.word	0x000186a0
 8001d40:	001e847f 	.word	0x001e847f
 8001d44:	003d08ff 	.word	0x003d08ff
 8001d48:	431bde83 	.word	0x431bde83
 8001d4c:	10624dd3 	.word	0x10624dd3

08001d50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	4608      	mov	r0, r1
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4603      	mov	r3, r0
 8001d60:	817b      	strh	r3, [r7, #10]
 8001d62:	460b      	mov	r3, r1
 8001d64:	813b      	strh	r3, [r7, #8]
 8001d66:	4613      	mov	r3, r2
 8001d68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d6a:	f7ff fbe7 	bl	800153c <HAL_GetTick>
 8001d6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	f040 80d9 	bne.w	8001f30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2319      	movs	r3, #25
 8001d84:	2201      	movs	r2, #1
 8001d86:	496d      	ldr	r1, [pc, #436]	@ (8001f3c <HAL_I2C_Mem_Write+0x1ec>)
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f971 	bl	8002070 <I2C_WaitOnFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d94:	2302      	movs	r3, #2
 8001d96:	e0cc      	b.n	8001f32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_I2C_Mem_Write+0x56>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e0c5      	b.n	8001f32 <HAL_I2C_Mem_Write+0x1e2>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d007      	beq.n	8001dcc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2221      	movs	r2, #33	@ 0x21
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2240      	movs	r2, #64	@ 0x40
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a3a      	ldr	r2, [r7, #32]
 8001df6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4a4d      	ldr	r2, [pc, #308]	@ (8001f40 <HAL_I2C_Mem_Write+0x1f0>)
 8001e0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e0e:	88f8      	ldrh	r0, [r7, #6]
 8001e10:	893a      	ldrh	r2, [r7, #8]
 8001e12:	8979      	ldrh	r1, [r7, #10]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f890 	bl	8001f44 <I2C_RequestMemoryWrite>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d052      	beq.n	8001ed0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e081      	b.n	8001f32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 fa36 	bl	80022a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00d      	beq.n	8001e5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d107      	bne.n	8001e56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06b      	b.n	8001f32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d11b      	bne.n	8001ed0 <HAL_I2C_Mem_Write+0x180>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d017      	beq.n	8001ed0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1aa      	bne.n	8001e2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fa29 	bl	8002334 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00d      	beq.n	8001f04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d107      	bne.n	8001f00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001efe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e016      	b.n	8001f32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f30:	2302      	movs	r3, #2
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	00100002 	.word	0x00100002
 8001f40:	ffff0000 	.word	0xffff0000

08001f44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	4611      	mov	r1, r2
 8001f50:	461a      	mov	r2, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	817b      	strh	r3, [r7, #10]
 8001f56:	460b      	mov	r3, r1
 8001f58:	813b      	strh	r3, [r7, #8]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f878 	bl	8002070 <I2C_WaitOnFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00d      	beq.n	8001fa2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f94:	d103      	bne.n	8001f9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e05f      	b.n	8002062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fa2:	897b      	ldrh	r3, [r7, #10]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	6a3a      	ldr	r2, [r7, #32]
 8001fb6:	492d      	ldr	r1, [pc, #180]	@ (800206c <I2C_RequestMemoryWrite+0x128>)
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f8d3 	bl	8002164 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e04c      	b.n	8002062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f95e 	bl	80022a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00d      	beq.n	800200a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d107      	bne.n	8002006 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002004:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e02b      	b.n	8002062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d105      	bne.n	800201c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002010:	893b      	ldrh	r3, [r7, #8]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	611a      	str	r2, [r3, #16]
 800201a:	e021      	b.n	8002060 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800201c:	893b      	ldrh	r3, [r7, #8]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	b29b      	uxth	r3, r3
 8002022:	b2da      	uxtb	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800202a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202c:	6a39      	ldr	r1, [r7, #32]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f938 	bl	80022a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00d      	beq.n	8002056 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	2b04      	cmp	r3, #4
 8002040:	d107      	bne.n	8002052 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002050:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e005      	b.n	8002062 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002056:	893b      	ldrh	r3, [r7, #8]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	00010002 	.word	0x00010002

08002070 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002080:	e048      	b.n	8002114 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d044      	beq.n	8002114 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208a:	f7ff fa57 	bl	800153c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d302      	bcc.n	80020a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d139      	bne.n	8002114 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	0c1b      	lsrs	r3, r3, #16
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10d      	bne.n	80020c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	43da      	mvns	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	4013      	ands	r3, r2
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	e00c      	b.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	43da      	mvns	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4013      	ands	r3, r2
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d116      	bne.n	8002114 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f043 0220 	orr.w	r2, r3, #32
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e023      	b.n	800215c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	0c1b      	lsrs	r3, r3, #16
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d10d      	bne.n	800213a <I2C_WaitOnFlagUntilTimeout+0xca>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	43da      	mvns	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	4013      	ands	r3, r2
 800212a:	b29b      	uxth	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	e00c      	b.n	8002154 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	43da      	mvns	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	4013      	ands	r3, r2
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	429a      	cmp	r2, r3
 8002158:	d093      	beq.n	8002082 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002172:	e071      	b.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002182:	d123      	bne.n	80021cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002192:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800219c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	f043 0204 	orr.w	r2, r3, #4
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e067      	b.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d2:	d041      	beq.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d4:	f7ff f9b2 	bl	800153c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d302      	bcc.n	80021ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d136      	bne.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d10c      	bne.n	800220e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	43da      	mvns	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4013      	ands	r3, r2
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	bf14      	ite	ne
 8002206:	2301      	movne	r3, #1
 8002208:	2300      	moveq	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	e00b      	b.n	8002226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	43da      	mvns	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	4013      	ands	r3, r2
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d016      	beq.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	f043 0220 	orr.w	r2, r3, #32
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e021      	b.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	0c1b      	lsrs	r3, r3, #16
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10c      	bne.n	800227c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	43da      	mvns	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4013      	ands	r3, r2
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf14      	ite	ne
 8002274:	2301      	movne	r3, #1
 8002276:	2300      	moveq	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e00b      	b.n	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4013      	ands	r3, r2
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	f47f af6d 	bne.w	8002174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022b0:	e034      	b.n	800231c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f886 	bl	80023c4 <I2C_IsAcknowledgeFailed>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e034      	b.n	800232c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d028      	beq.n	800231c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ca:	f7ff f937 	bl	800153c <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d302      	bcc.n	80022e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d11d      	bne.n	800231c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ea:	2b80      	cmp	r3, #128	@ 0x80
 80022ec:	d016      	beq.n	800231c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e007      	b.n	800232c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002326:	2b80      	cmp	r3, #128	@ 0x80
 8002328:	d1c3      	bne.n	80022b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002340:	e034      	b.n	80023ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f83e 	bl	80023c4 <I2C_IsAcknowledgeFailed>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e034      	b.n	80023bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d028      	beq.n	80023ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235a:	f7ff f8ef 	bl	800153c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	d302      	bcc.n	8002370 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d11d      	bne.n	80023ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b04      	cmp	r3, #4
 800237c:	d016      	beq.n	80023ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e007      	b.n	80023bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d1c3      	bne.n	8002342 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023da:	d11b      	bne.n	8002414 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	f043 0204 	orr.w	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e272      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8087 	beq.w	800254e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002440:	4b92      	ldr	r3, [pc, #584]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b04      	cmp	r3, #4
 800244a:	d00c      	beq.n	8002466 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800244c:	4b8f      	ldr	r3, [pc, #572]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b08      	cmp	r3, #8
 8002456:	d112      	bne.n	800247e <HAL_RCC_OscConfig+0x5e>
 8002458:	4b8c      	ldr	r3, [pc, #560]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002464:	d10b      	bne.n	800247e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002466:	4b89      	ldr	r3, [pc, #548]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d06c      	beq.n	800254c <HAL_RCC_OscConfig+0x12c>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d168      	bne.n	800254c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e24c      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002486:	d106      	bne.n	8002496 <HAL_RCC_OscConfig+0x76>
 8002488:	4b80      	ldr	r3, [pc, #512]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a7f      	ldr	r2, [pc, #508]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 800248e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	e02e      	b.n	80024f4 <HAL_RCC_OscConfig+0xd4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x98>
 800249e:	4b7b      	ldr	r3, [pc, #492]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7a      	ldr	r2, [pc, #488]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80024a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b78      	ldr	r3, [pc, #480]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a77      	ldr	r2, [pc, #476]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80024b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e01d      	b.n	80024f4 <HAL_RCC_OscConfig+0xd4>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0xbc>
 80024c2:	4b72      	ldr	r3, [pc, #456]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a71      	ldr	r2, [pc, #452]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80024c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b6f      	ldr	r3, [pc, #444]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6e      	ldr	r2, [pc, #440]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0xd4>
 80024dc:	4b6b      	ldr	r3, [pc, #428]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a6a      	ldr	r2, [pc, #424]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80024e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b68      	ldr	r3, [pc, #416]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a67      	ldr	r2, [pc, #412]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80024ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7ff f81e 	bl	800153c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff f81a 	bl	800153c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	@ 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e200      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b5d      	ldr	r3, [pc, #372]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0xe4>
 8002522:	e014      	b.n	800254e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff f80a 	bl	800153c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252c:	f7ff f806 	bl	800153c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	@ 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e1ec      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	4b53      	ldr	r3, [pc, #332]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x10c>
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d063      	beq.n	8002622 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800255a:	4b4c      	ldr	r3, [pc, #304]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002566:	4b49      	ldr	r3, [pc, #292]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b08      	cmp	r3, #8
 8002570:	d11c      	bne.n	80025ac <HAL_RCC_OscConfig+0x18c>
 8002572:	4b46      	ldr	r3, [pc, #280]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d116      	bne.n	80025ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	4b43      	ldr	r3, [pc, #268]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_RCC_OscConfig+0x176>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e1c0      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002596:	4b3d      	ldr	r3, [pc, #244]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4939      	ldr	r1, [pc, #228]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025aa:	e03a      	b.n	8002622 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d020      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b4:	4b36      	ldr	r3, [pc, #216]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7fe ffbf 	bl	800153c <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c2:	f7fe ffbb 	bl	800153c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e1a1      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	4b2d      	ldr	r3, [pc, #180]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e0:	4b2a      	ldr	r3, [pc, #168]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4927      	ldr	r1, [pc, #156]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]
 80025f4:	e015      	b.n	8002622 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f6:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <HAL_RCC_OscConfig+0x270>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe ff9e 	bl	800153c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002604:	f7fe ff9a 	bl	800153c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e180      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002616:	4b1d      	ldr	r3, [pc, #116]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d03a      	beq.n	80026a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d019      	beq.n	800266a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002636:	4b17      	ldr	r3, [pc, #92]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263c:	f7fe ff7e 	bl	800153c <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002644:	f7fe ff7a 	bl	800153c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e160      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002656:	4b0d      	ldr	r3, [pc, #52]	@ (800268c <HAL_RCC_OscConfig+0x26c>)
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002662:	2001      	movs	r0, #1
 8002664:	f000 faba 	bl	8002bdc <RCC_Delay>
 8002668:	e01c      	b.n	80026a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800266a:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <HAL_RCC_OscConfig+0x274>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002670:	f7fe ff64 	bl	800153c <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002676:	e00f      	b.n	8002698 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002678:	f7fe ff60 	bl	800153c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d908      	bls.n	8002698 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e146      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	42420000 	.word	0x42420000
 8002694:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002698:	4b92      	ldr	r3, [pc, #584]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e9      	bne.n	8002678 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80a6 	beq.w	80027fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b6:	4b8b      	ldr	r3, [pc, #556]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10d      	bne.n	80026de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c2:	4b88      	ldr	r3, [pc, #544]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	4a87      	ldr	r2, [pc, #540]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026cc:	61d3      	str	r3, [r2, #28]
 80026ce:	4b85      	ldr	r3, [pc, #532]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b82      	ldr	r3, [pc, #520]	@ (80028e8 <HAL_RCC_OscConfig+0x4c8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d118      	bne.n	800271c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ea:	4b7f      	ldr	r3, [pc, #508]	@ (80028e8 <HAL_RCC_OscConfig+0x4c8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a7e      	ldr	r2, [pc, #504]	@ (80028e8 <HAL_RCC_OscConfig+0x4c8>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f6:	f7fe ff21 	bl	800153c <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fe:	f7fe ff1d 	bl	800153c <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b64      	cmp	r3, #100	@ 0x64
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e103      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	4b75      	ldr	r3, [pc, #468]	@ (80028e8 <HAL_RCC_OscConfig+0x4c8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x312>
 8002724:	4b6f      	ldr	r3, [pc, #444]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4a6e      	ldr	r2, [pc, #440]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6213      	str	r3, [r2, #32]
 8002730:	e02d      	b.n	800278e <HAL_RCC_OscConfig+0x36e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x334>
 800273a:	4b6a      	ldr	r3, [pc, #424]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4a69      	ldr	r2, [pc, #420]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6213      	str	r3, [r2, #32]
 8002746:	4b67      	ldr	r3, [pc, #412]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a66      	ldr	r2, [pc, #408]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	f023 0304 	bic.w	r3, r3, #4
 8002750:	6213      	str	r3, [r2, #32]
 8002752:	e01c      	b.n	800278e <HAL_RCC_OscConfig+0x36e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b05      	cmp	r3, #5
 800275a:	d10c      	bne.n	8002776 <HAL_RCC_OscConfig+0x356>
 800275c:	4b61      	ldr	r3, [pc, #388]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4a60      	ldr	r2, [pc, #384]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	6213      	str	r3, [r2, #32]
 8002768:	4b5e      	ldr	r3, [pc, #376]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4a5d      	ldr	r2, [pc, #372]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6213      	str	r3, [r2, #32]
 8002774:	e00b      	b.n	800278e <HAL_RCC_OscConfig+0x36e>
 8002776:	4b5b      	ldr	r3, [pc, #364]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	4a5a      	ldr	r2, [pc, #360]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	6213      	str	r3, [r2, #32]
 8002782:	4b58      	ldr	r3, [pc, #352]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4a57      	ldr	r2, [pc, #348]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	f023 0304 	bic.w	r3, r3, #4
 800278c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d015      	beq.n	80027c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7fe fed1 	bl	800153c <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe fecd 	bl	800153c <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e0b1      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b4:	4b4b      	ldr	r3, [pc, #300]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ee      	beq.n	800279e <HAL_RCC_OscConfig+0x37e>
 80027c0:	e014      	b.n	80027ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c2:	f7fe febb 	bl	800153c <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7fe feb7 	bl	800153c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e09b      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e0:	4b40      	ldr	r3, [pc, #256]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1ee      	bne.n	80027ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d105      	bne.n	80027fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f2:	4b3c      	ldr	r3, [pc, #240]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4a3b      	ldr	r2, [pc, #236]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 8087 	beq.w	8002916 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002808:	4b36      	ldr	r3, [pc, #216]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 030c 	and.w	r3, r3, #12
 8002810:	2b08      	cmp	r3, #8
 8002812:	d061      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d146      	bne.n	80028aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281c:	4b33      	ldr	r3, [pc, #204]	@ (80028ec <HAL_RCC_OscConfig+0x4cc>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7fe fe8b 	bl	800153c <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282a:	f7fe fe87 	bl	800153c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e06d      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283c:	4b29      	ldr	r3, [pc, #164]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002850:	d108      	bne.n	8002864 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002852:	4b24      	ldr	r3, [pc, #144]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	4921      	ldr	r1, [pc, #132]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002864:	4b1f      	ldr	r3, [pc, #124]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a19      	ldr	r1, [r3, #32]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002874:	430b      	orrs	r3, r1
 8002876:	491b      	ldr	r1, [pc, #108]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800287c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ec <HAL_RCC_OscConfig+0x4cc>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe fe5b 	bl	800153c <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe fe57 	bl	800153c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e03d      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800289c:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x46a>
 80028a8:	e035      	b.n	8002916 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <HAL_RCC_OscConfig+0x4cc>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe fe44 	bl	800153c <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b8:	f7fe fe40 	bl	800153c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e026      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ca:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x498>
 80028d6:	e01e      	b.n	8002916 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e019      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40007000 	.word	0x40007000
 80028ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <HAL_RCC_OscConfig+0x500>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	429a      	cmp	r2, r3
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d001      	beq.n	8002916 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000

08002924 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0d0      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002938:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d910      	bls.n	8002968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b67      	ldr	r3, [pc, #412]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 0207 	bic.w	r2, r3, #7
 800294e:	4965      	ldr	r1, [pc, #404]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b63      	ldr	r3, [pc, #396]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0b8      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002980:	4b59      	ldr	r3, [pc, #356]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a58      	ldr	r2, [pc, #352]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800298a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002998:	4b53      	ldr	r3, [pc, #332]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a52      	ldr	r2, [pc, #328]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a4:	4b50      	ldr	r3, [pc, #320]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	494d      	ldr	r1, [pc, #308]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d040      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	4b47      	ldr	r3, [pc, #284]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d115      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e07f      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	4b41      	ldr	r3, [pc, #260]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e073      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e06b      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a02:	4b39      	ldr	r3, [pc, #228]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f023 0203 	bic.w	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4936      	ldr	r1, [pc, #216]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a14:	f7fe fd92 	bl	800153c <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7fe fd8e 	bl	800153c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e053      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 020c 	and.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1eb      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a44:	4b27      	ldr	r3, [pc, #156]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d210      	bcs.n	8002a74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b24      	ldr	r3, [pc, #144]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 0207 	bic.w	r2, r3, #7
 8002a5a:	4922      	ldr	r1, [pc, #136]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b20      	ldr	r3, [pc, #128]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e032      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a80:	4b19      	ldr	r3, [pc, #100]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4916      	ldr	r1, [pc, #88]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	490e      	ldr	r1, [pc, #56]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ab2:	f000 f821 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	490a      	ldr	r1, [pc, #40]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002ac4:	5ccb      	ldrb	r3, [r1, r3]
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	4a09      	ldr	r2, [pc, #36]	@ (8002af0 <HAL_RCC_ClockConfig+0x1cc>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fcf0 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40022000 	.word	0x40022000
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	0800487c 	.word	0x0800487c
 8002af0:	20000014 	.word	0x20000014
 8002af4:	20000018 	.word	0x20000018

08002af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b12:	4b1e      	ldr	r3, [pc, #120]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d002      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x30>
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d003      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x36>
 8002b26:	e027      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b28:	4b19      	ldr	r3, [pc, #100]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b2a:	613b      	str	r3, [r7, #16]
      break;
 8002b2c:	e027      	b.n	8002b7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	0c9b      	lsrs	r3, r3, #18
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	4a17      	ldr	r2, [pc, #92]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b38:	5cd3      	ldrb	r3, [r2, r3]
 8002b3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d010      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b46:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	0c5b      	lsrs	r3, r3, #17
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	4a11      	ldr	r2, [pc, #68]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b52:	5cd3      	ldrb	r3, [r2, r3]
 8002b54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a0d      	ldr	r2, [pc, #52]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b5a:	fb03 f202 	mul.w	r2, r3, r2
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e004      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	613b      	str	r3, [r7, #16]
      break;
 8002b76:	e002      	b.n	8002b7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b78:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b7a:	613b      	str	r3, [r7, #16]
      break;
 8002b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b7e:	693b      	ldr	r3, [r7, #16]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	007a1200 	.word	0x007a1200
 8002b94:	08004894 	.word	0x08004894
 8002b98:	080048a4 	.word	0x080048a4
 8002b9c:	003d0900 	.word	0x003d0900

08002ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba4:	4b02      	ldr	r3, [pc, #8]	@ (8002bb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	20000014 	.word	0x20000014

08002bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bb8:	f7ff fff2 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4903      	ldr	r1, [pc, #12]	@ (8002bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	0800488c 	.word	0x0800488c

08002bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002be4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <RCC_Delay+0x34>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0a      	ldr	r2, [pc, #40]	@ (8002c14 <RCC_Delay+0x38>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	0a5b      	lsrs	r3, r3, #9
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bf8:	bf00      	nop
  }
  while (Delay --);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	60fa      	str	r2, [r7, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f9      	bne.n	8002bf8 <RCC_Delay+0x1c>
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	20000014 	.word	0x20000014
 8002c14:	10624dd3 	.word	0x10624dd3

08002c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e041      	b.n	8002cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fe fb78 	bl	8001334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f000 f940 	bl	8002edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d001      	beq.n	8002cd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e032      	b.n	8002d36 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a18      	ldr	r2, [pc, #96]	@ (8002d40 <HAL_TIM_Base_Start+0x88>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00e      	beq.n	8002d00 <HAL_TIM_Base_Start+0x48>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cea:	d009      	beq.n	8002d00 <HAL_TIM_Base_Start+0x48>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a14      	ldr	r2, [pc, #80]	@ (8002d44 <HAL_TIM_Base_Start+0x8c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_TIM_Base_Start+0x48>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a13      	ldr	r2, [pc, #76]	@ (8002d48 <HAL_TIM_Base_Start+0x90>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d111      	bne.n	8002d24 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d010      	beq.n	8002d34 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d22:	e007      	b.n	8002d34 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	40012c00 	.word	0x40012c00
 8002d44:	40000400 	.word	0x40000400
 8002d48:	40000800 	.word	0x40000800

08002d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_TIM_ConfigClockSource+0x1c>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e0b4      	b.n	8002ed2 <HAL_TIM_ConfigClockSource+0x186>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da0:	d03e      	beq.n	8002e20 <HAL_TIM_ConfigClockSource+0xd4>
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da6:	f200 8087 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dae:	f000 8086 	beq.w	8002ebe <HAL_TIM_ConfigClockSource+0x172>
 8002db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db6:	d87f      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002db8:	2b70      	cmp	r3, #112	@ 0x70
 8002dba:	d01a      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0xa6>
 8002dbc:	2b70      	cmp	r3, #112	@ 0x70
 8002dbe:	d87b      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc0:	2b60      	cmp	r3, #96	@ 0x60
 8002dc2:	d050      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x11a>
 8002dc4:	2b60      	cmp	r3, #96	@ 0x60
 8002dc6:	d877      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc8:	2b50      	cmp	r3, #80	@ 0x50
 8002dca:	d03c      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0xfa>
 8002dcc:	2b50      	cmp	r3, #80	@ 0x50
 8002dce:	d873      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd0:	2b40      	cmp	r3, #64	@ 0x40
 8002dd2:	d058      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0x13a>
 8002dd4:	2b40      	cmp	r3, #64	@ 0x40
 8002dd6:	d86f      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd8:	2b30      	cmp	r3, #48	@ 0x30
 8002dda:	d064      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ddc:	2b30      	cmp	r3, #48	@ 0x30
 8002dde:	d86b      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d060      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d867      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d05c      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d05a      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8002df0:	e062      	b.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e02:	f000 f950 	bl	80030a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	609a      	str	r2, [r3, #8]
      break;
 8002e1e:	e04f      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e30:	f000 f939 	bl	80030a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e42:	609a      	str	r2, [r3, #8]
      break;
 8002e44:	e03c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e52:	461a      	mov	r2, r3
 8002e54:	f000 f8b0 	bl	8002fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2150      	movs	r1, #80	@ 0x50
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f907 	bl	8003072 <TIM_ITRx_SetConfig>
      break;
 8002e64:	e02c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e72:	461a      	mov	r2, r3
 8002e74:	f000 f8ce 	bl	8003014 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2160      	movs	r1, #96	@ 0x60
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f8f7 	bl	8003072 <TIM_ITRx_SetConfig>
      break;
 8002e84:	e01c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e92:	461a      	mov	r2, r3
 8002e94:	f000 f890 	bl	8002fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2140      	movs	r1, #64	@ 0x40
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f8e7 	bl	8003072 <TIM_ITRx_SetConfig>
      break;
 8002ea4:	e00c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f000 f8de 	bl	8003072 <TIM_ITRx_SetConfig>
      break;
 8002eb6:	e003      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebc:	e000      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a2f      	ldr	r2, [pc, #188]	@ (8002fac <TIM_Base_SetConfig+0xd0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00b      	beq.n	8002f0c <TIM_Base_SetConfig+0x30>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002efa:	d007      	beq.n	8002f0c <TIM_Base_SetConfig+0x30>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a2c      	ldr	r2, [pc, #176]	@ (8002fb0 <TIM_Base_SetConfig+0xd4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d003      	beq.n	8002f0c <TIM_Base_SetConfig+0x30>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb4 <TIM_Base_SetConfig+0xd8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d108      	bne.n	8002f1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a22      	ldr	r2, [pc, #136]	@ (8002fac <TIM_Base_SetConfig+0xd0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00b      	beq.n	8002f3e <TIM_Base_SetConfig+0x62>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f2c:	d007      	beq.n	8002f3e <TIM_Base_SetConfig+0x62>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb0 <TIM_Base_SetConfig+0xd4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d003      	beq.n	8002f3e <TIM_Base_SetConfig+0x62>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb4 <TIM_Base_SetConfig+0xd8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d108      	bne.n	8002f50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a0d      	ldr	r2, [pc, #52]	@ (8002fac <TIM_Base_SetConfig+0xd0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d103      	bne.n	8002f84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f023 0201 	bic.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	611a      	str	r2, [r3, #16]
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800

08002fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f023 0201 	bic.w	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f023 030a 	bic.w	r3, r3, #10
 8002ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	621a      	str	r2, [r3, #32]
}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0210 	bic.w	r2, r3, #16
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800303e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	031b      	lsls	r3, r3, #12
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003050:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	621a      	str	r2, [r3, #32]
}
 8003068:	bf00      	nop
 800306a:	371c      	adds	r7, #28
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	f043 0307 	orr.w	r3, r3, #7
 8003094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	bf00      	nop
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b087      	sub	sp, #28
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	021a      	lsls	r2, r3, #8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	609a      	str	r2, [r3, #8]
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e046      	b.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a16      	ldr	r2, [pc, #88]	@ (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00e      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003148:	d009      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a12      	ldr	r2, [pc, #72]	@ (8003198 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d004      	beq.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a10      	ldr	r2, [pc, #64]	@ (800319c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d10c      	bne.n	8003178 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	4313      	orrs	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40000400 	.word	0x40000400
 800319c:	40000800 	.word	0x40000800

080031a0 <siprintf>:
 80031a0:	b40e      	push	{r1, r2, r3}
 80031a2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80031a6:	b500      	push	{lr}
 80031a8:	b09c      	sub	sp, #112	@ 0x70
 80031aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80031ac:	9002      	str	r0, [sp, #8]
 80031ae:	9006      	str	r0, [sp, #24]
 80031b0:	9107      	str	r1, [sp, #28]
 80031b2:	9104      	str	r1, [sp, #16]
 80031b4:	4808      	ldr	r0, [pc, #32]	@ (80031d8 <siprintf+0x38>)
 80031b6:	4909      	ldr	r1, [pc, #36]	@ (80031dc <siprintf+0x3c>)
 80031b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80031bc:	9105      	str	r1, [sp, #20]
 80031be:	6800      	ldr	r0, [r0, #0]
 80031c0:	a902      	add	r1, sp, #8
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	f000 f992 	bl	80034ec <_svfiprintf_r>
 80031c8:	2200      	movs	r2, #0
 80031ca:	9b02      	ldr	r3, [sp, #8]
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	b01c      	add	sp, #112	@ 0x70
 80031d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80031d4:	b003      	add	sp, #12
 80031d6:	4770      	bx	lr
 80031d8:	20000020 	.word	0x20000020
 80031dc:	ffff0208 	.word	0xffff0208

080031e0 <memset>:
 80031e0:	4603      	mov	r3, r0
 80031e2:	4402      	add	r2, r0
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d100      	bne.n	80031ea <memset+0xa>
 80031e8:	4770      	bx	lr
 80031ea:	f803 1b01 	strb.w	r1, [r3], #1
 80031ee:	e7f9      	b.n	80031e4 <memset+0x4>

080031f0 <__errno>:
 80031f0:	4b01      	ldr	r3, [pc, #4]	@ (80031f8 <__errno+0x8>)
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000020 	.word	0x20000020

080031fc <__libc_init_array>:
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	2600      	movs	r6, #0
 8003200:	4d0c      	ldr	r5, [pc, #48]	@ (8003234 <__libc_init_array+0x38>)
 8003202:	4c0d      	ldr	r4, [pc, #52]	@ (8003238 <__libc_init_array+0x3c>)
 8003204:	1b64      	subs	r4, r4, r5
 8003206:	10a4      	asrs	r4, r4, #2
 8003208:	42a6      	cmp	r6, r4
 800320a:	d109      	bne.n	8003220 <__libc_init_array+0x24>
 800320c:	f000 fc78 	bl	8003b00 <_init>
 8003210:	2600      	movs	r6, #0
 8003212:	4d0a      	ldr	r5, [pc, #40]	@ (800323c <__libc_init_array+0x40>)
 8003214:	4c0a      	ldr	r4, [pc, #40]	@ (8003240 <__libc_init_array+0x44>)
 8003216:	1b64      	subs	r4, r4, r5
 8003218:	10a4      	asrs	r4, r4, #2
 800321a:	42a6      	cmp	r6, r4
 800321c:	d105      	bne.n	800322a <__libc_init_array+0x2e>
 800321e:	bd70      	pop	{r4, r5, r6, pc}
 8003220:	f855 3b04 	ldr.w	r3, [r5], #4
 8003224:	4798      	blx	r3
 8003226:	3601      	adds	r6, #1
 8003228:	e7ee      	b.n	8003208 <__libc_init_array+0xc>
 800322a:	f855 3b04 	ldr.w	r3, [r5], #4
 800322e:	4798      	blx	r3
 8003230:	3601      	adds	r6, #1
 8003232:	e7f2      	b.n	800321a <__libc_init_array+0x1e>
 8003234:	080048dc 	.word	0x080048dc
 8003238:	080048dc 	.word	0x080048dc
 800323c:	080048dc 	.word	0x080048dc
 8003240:	080048e0 	.word	0x080048e0

08003244 <__retarget_lock_acquire_recursive>:
 8003244:	4770      	bx	lr

08003246 <__retarget_lock_release_recursive>:
 8003246:	4770      	bx	lr

08003248 <_free_r>:
 8003248:	b538      	push	{r3, r4, r5, lr}
 800324a:	4605      	mov	r5, r0
 800324c:	2900      	cmp	r1, #0
 800324e:	d040      	beq.n	80032d2 <_free_r+0x8a>
 8003250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003254:	1f0c      	subs	r4, r1, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	bfb8      	it	lt
 800325a:	18e4      	addlt	r4, r4, r3
 800325c:	f000 f8de 	bl	800341c <__malloc_lock>
 8003260:	4a1c      	ldr	r2, [pc, #112]	@ (80032d4 <_free_r+0x8c>)
 8003262:	6813      	ldr	r3, [r2, #0]
 8003264:	b933      	cbnz	r3, 8003274 <_free_r+0x2c>
 8003266:	6063      	str	r3, [r4, #4]
 8003268:	6014      	str	r4, [r2, #0]
 800326a:	4628      	mov	r0, r5
 800326c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003270:	f000 b8da 	b.w	8003428 <__malloc_unlock>
 8003274:	42a3      	cmp	r3, r4
 8003276:	d908      	bls.n	800328a <_free_r+0x42>
 8003278:	6820      	ldr	r0, [r4, #0]
 800327a:	1821      	adds	r1, r4, r0
 800327c:	428b      	cmp	r3, r1
 800327e:	bf01      	itttt	eq
 8003280:	6819      	ldreq	r1, [r3, #0]
 8003282:	685b      	ldreq	r3, [r3, #4]
 8003284:	1809      	addeq	r1, r1, r0
 8003286:	6021      	streq	r1, [r4, #0]
 8003288:	e7ed      	b.n	8003266 <_free_r+0x1e>
 800328a:	461a      	mov	r2, r3
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	b10b      	cbz	r3, 8003294 <_free_r+0x4c>
 8003290:	42a3      	cmp	r3, r4
 8003292:	d9fa      	bls.n	800328a <_free_r+0x42>
 8003294:	6811      	ldr	r1, [r2, #0]
 8003296:	1850      	adds	r0, r2, r1
 8003298:	42a0      	cmp	r0, r4
 800329a:	d10b      	bne.n	80032b4 <_free_r+0x6c>
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	4401      	add	r1, r0
 80032a0:	1850      	adds	r0, r2, r1
 80032a2:	4283      	cmp	r3, r0
 80032a4:	6011      	str	r1, [r2, #0]
 80032a6:	d1e0      	bne.n	800326a <_free_r+0x22>
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4408      	add	r0, r1
 80032ae:	6010      	str	r0, [r2, #0]
 80032b0:	6053      	str	r3, [r2, #4]
 80032b2:	e7da      	b.n	800326a <_free_r+0x22>
 80032b4:	d902      	bls.n	80032bc <_free_r+0x74>
 80032b6:	230c      	movs	r3, #12
 80032b8:	602b      	str	r3, [r5, #0]
 80032ba:	e7d6      	b.n	800326a <_free_r+0x22>
 80032bc:	6820      	ldr	r0, [r4, #0]
 80032be:	1821      	adds	r1, r4, r0
 80032c0:	428b      	cmp	r3, r1
 80032c2:	bf01      	itttt	eq
 80032c4:	6819      	ldreq	r1, [r3, #0]
 80032c6:	685b      	ldreq	r3, [r3, #4]
 80032c8:	1809      	addeq	r1, r1, r0
 80032ca:	6021      	streq	r1, [r4, #0]
 80032cc:	6063      	str	r3, [r4, #4]
 80032ce:	6054      	str	r4, [r2, #4]
 80032d0:	e7cb      	b.n	800326a <_free_r+0x22>
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
 80032d4:	2000069c 	.word	0x2000069c

080032d8 <sbrk_aligned>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	4e0f      	ldr	r6, [pc, #60]	@ (8003318 <sbrk_aligned+0x40>)
 80032dc:	460c      	mov	r4, r1
 80032de:	6831      	ldr	r1, [r6, #0]
 80032e0:	4605      	mov	r5, r0
 80032e2:	b911      	cbnz	r1, 80032ea <sbrk_aligned+0x12>
 80032e4:	f000 fbaa 	bl	8003a3c <_sbrk_r>
 80032e8:	6030      	str	r0, [r6, #0]
 80032ea:	4621      	mov	r1, r4
 80032ec:	4628      	mov	r0, r5
 80032ee:	f000 fba5 	bl	8003a3c <_sbrk_r>
 80032f2:	1c43      	adds	r3, r0, #1
 80032f4:	d103      	bne.n	80032fe <sbrk_aligned+0x26>
 80032f6:	f04f 34ff 	mov.w	r4, #4294967295
 80032fa:	4620      	mov	r0, r4
 80032fc:	bd70      	pop	{r4, r5, r6, pc}
 80032fe:	1cc4      	adds	r4, r0, #3
 8003300:	f024 0403 	bic.w	r4, r4, #3
 8003304:	42a0      	cmp	r0, r4
 8003306:	d0f8      	beq.n	80032fa <sbrk_aligned+0x22>
 8003308:	1a21      	subs	r1, r4, r0
 800330a:	4628      	mov	r0, r5
 800330c:	f000 fb96 	bl	8003a3c <_sbrk_r>
 8003310:	3001      	adds	r0, #1
 8003312:	d1f2      	bne.n	80032fa <sbrk_aligned+0x22>
 8003314:	e7ef      	b.n	80032f6 <sbrk_aligned+0x1e>
 8003316:	bf00      	nop
 8003318:	20000698 	.word	0x20000698

0800331c <_malloc_r>:
 800331c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003320:	1ccd      	adds	r5, r1, #3
 8003322:	f025 0503 	bic.w	r5, r5, #3
 8003326:	3508      	adds	r5, #8
 8003328:	2d0c      	cmp	r5, #12
 800332a:	bf38      	it	cc
 800332c:	250c      	movcc	r5, #12
 800332e:	2d00      	cmp	r5, #0
 8003330:	4606      	mov	r6, r0
 8003332:	db01      	blt.n	8003338 <_malloc_r+0x1c>
 8003334:	42a9      	cmp	r1, r5
 8003336:	d904      	bls.n	8003342 <_malloc_r+0x26>
 8003338:	230c      	movs	r3, #12
 800333a:	6033      	str	r3, [r6, #0]
 800333c:	2000      	movs	r0, #0
 800333e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003418 <_malloc_r+0xfc>
 8003346:	f000 f869 	bl	800341c <__malloc_lock>
 800334a:	f8d8 3000 	ldr.w	r3, [r8]
 800334e:	461c      	mov	r4, r3
 8003350:	bb44      	cbnz	r4, 80033a4 <_malloc_r+0x88>
 8003352:	4629      	mov	r1, r5
 8003354:	4630      	mov	r0, r6
 8003356:	f7ff ffbf 	bl	80032d8 <sbrk_aligned>
 800335a:	1c43      	adds	r3, r0, #1
 800335c:	4604      	mov	r4, r0
 800335e:	d158      	bne.n	8003412 <_malloc_r+0xf6>
 8003360:	f8d8 4000 	ldr.w	r4, [r8]
 8003364:	4627      	mov	r7, r4
 8003366:	2f00      	cmp	r7, #0
 8003368:	d143      	bne.n	80033f2 <_malloc_r+0xd6>
 800336a:	2c00      	cmp	r4, #0
 800336c:	d04b      	beq.n	8003406 <_malloc_r+0xea>
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	4639      	mov	r1, r7
 8003372:	4630      	mov	r0, r6
 8003374:	eb04 0903 	add.w	r9, r4, r3
 8003378:	f000 fb60 	bl	8003a3c <_sbrk_r>
 800337c:	4581      	cmp	r9, r0
 800337e:	d142      	bne.n	8003406 <_malloc_r+0xea>
 8003380:	6821      	ldr	r1, [r4, #0]
 8003382:	4630      	mov	r0, r6
 8003384:	1a6d      	subs	r5, r5, r1
 8003386:	4629      	mov	r1, r5
 8003388:	f7ff ffa6 	bl	80032d8 <sbrk_aligned>
 800338c:	3001      	adds	r0, #1
 800338e:	d03a      	beq.n	8003406 <_malloc_r+0xea>
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	442b      	add	r3, r5
 8003394:	6023      	str	r3, [r4, #0]
 8003396:	f8d8 3000 	ldr.w	r3, [r8]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	bb62      	cbnz	r2, 80033f8 <_malloc_r+0xdc>
 800339e:	f8c8 7000 	str.w	r7, [r8]
 80033a2:	e00f      	b.n	80033c4 <_malloc_r+0xa8>
 80033a4:	6822      	ldr	r2, [r4, #0]
 80033a6:	1b52      	subs	r2, r2, r5
 80033a8:	d420      	bmi.n	80033ec <_malloc_r+0xd0>
 80033aa:	2a0b      	cmp	r2, #11
 80033ac:	d917      	bls.n	80033de <_malloc_r+0xc2>
 80033ae:	1961      	adds	r1, r4, r5
 80033b0:	42a3      	cmp	r3, r4
 80033b2:	6025      	str	r5, [r4, #0]
 80033b4:	bf18      	it	ne
 80033b6:	6059      	strne	r1, [r3, #4]
 80033b8:	6863      	ldr	r3, [r4, #4]
 80033ba:	bf08      	it	eq
 80033bc:	f8c8 1000 	streq.w	r1, [r8]
 80033c0:	5162      	str	r2, [r4, r5]
 80033c2:	604b      	str	r3, [r1, #4]
 80033c4:	4630      	mov	r0, r6
 80033c6:	f000 f82f 	bl	8003428 <__malloc_unlock>
 80033ca:	f104 000b 	add.w	r0, r4, #11
 80033ce:	1d23      	adds	r3, r4, #4
 80033d0:	f020 0007 	bic.w	r0, r0, #7
 80033d4:	1ac2      	subs	r2, r0, r3
 80033d6:	bf1c      	itt	ne
 80033d8:	1a1b      	subne	r3, r3, r0
 80033da:	50a3      	strne	r3, [r4, r2]
 80033dc:	e7af      	b.n	800333e <_malloc_r+0x22>
 80033de:	6862      	ldr	r2, [r4, #4]
 80033e0:	42a3      	cmp	r3, r4
 80033e2:	bf0c      	ite	eq
 80033e4:	f8c8 2000 	streq.w	r2, [r8]
 80033e8:	605a      	strne	r2, [r3, #4]
 80033ea:	e7eb      	b.n	80033c4 <_malloc_r+0xa8>
 80033ec:	4623      	mov	r3, r4
 80033ee:	6864      	ldr	r4, [r4, #4]
 80033f0:	e7ae      	b.n	8003350 <_malloc_r+0x34>
 80033f2:	463c      	mov	r4, r7
 80033f4:	687f      	ldr	r7, [r7, #4]
 80033f6:	e7b6      	b.n	8003366 <_malloc_r+0x4a>
 80033f8:	461a      	mov	r2, r3
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	42a3      	cmp	r3, r4
 80033fe:	d1fb      	bne.n	80033f8 <_malloc_r+0xdc>
 8003400:	2300      	movs	r3, #0
 8003402:	6053      	str	r3, [r2, #4]
 8003404:	e7de      	b.n	80033c4 <_malloc_r+0xa8>
 8003406:	230c      	movs	r3, #12
 8003408:	4630      	mov	r0, r6
 800340a:	6033      	str	r3, [r6, #0]
 800340c:	f000 f80c 	bl	8003428 <__malloc_unlock>
 8003410:	e794      	b.n	800333c <_malloc_r+0x20>
 8003412:	6005      	str	r5, [r0, #0]
 8003414:	e7d6      	b.n	80033c4 <_malloc_r+0xa8>
 8003416:	bf00      	nop
 8003418:	2000069c 	.word	0x2000069c

0800341c <__malloc_lock>:
 800341c:	4801      	ldr	r0, [pc, #4]	@ (8003424 <__malloc_lock+0x8>)
 800341e:	f7ff bf11 	b.w	8003244 <__retarget_lock_acquire_recursive>
 8003422:	bf00      	nop
 8003424:	20000694 	.word	0x20000694

08003428 <__malloc_unlock>:
 8003428:	4801      	ldr	r0, [pc, #4]	@ (8003430 <__malloc_unlock+0x8>)
 800342a:	f7ff bf0c 	b.w	8003246 <__retarget_lock_release_recursive>
 800342e:	bf00      	nop
 8003430:	20000694 	.word	0x20000694

08003434 <__ssputs_r>:
 8003434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003438:	461f      	mov	r7, r3
 800343a:	688e      	ldr	r6, [r1, #8]
 800343c:	4682      	mov	sl, r0
 800343e:	42be      	cmp	r6, r7
 8003440:	460c      	mov	r4, r1
 8003442:	4690      	mov	r8, r2
 8003444:	680b      	ldr	r3, [r1, #0]
 8003446:	d82d      	bhi.n	80034a4 <__ssputs_r+0x70>
 8003448:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800344c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003450:	d026      	beq.n	80034a0 <__ssputs_r+0x6c>
 8003452:	6965      	ldr	r5, [r4, #20]
 8003454:	6909      	ldr	r1, [r1, #16]
 8003456:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800345a:	eba3 0901 	sub.w	r9, r3, r1
 800345e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003462:	1c7b      	adds	r3, r7, #1
 8003464:	444b      	add	r3, r9
 8003466:	106d      	asrs	r5, r5, #1
 8003468:	429d      	cmp	r5, r3
 800346a:	bf38      	it	cc
 800346c:	461d      	movcc	r5, r3
 800346e:	0553      	lsls	r3, r2, #21
 8003470:	d527      	bpl.n	80034c2 <__ssputs_r+0x8e>
 8003472:	4629      	mov	r1, r5
 8003474:	f7ff ff52 	bl	800331c <_malloc_r>
 8003478:	4606      	mov	r6, r0
 800347a:	b360      	cbz	r0, 80034d6 <__ssputs_r+0xa2>
 800347c:	464a      	mov	r2, r9
 800347e:	6921      	ldr	r1, [r4, #16]
 8003480:	f000 fafa 	bl	8003a78 <memcpy>
 8003484:	89a3      	ldrh	r3, [r4, #12]
 8003486:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800348a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800348e:	81a3      	strh	r3, [r4, #12]
 8003490:	6126      	str	r6, [r4, #16]
 8003492:	444e      	add	r6, r9
 8003494:	6026      	str	r6, [r4, #0]
 8003496:	463e      	mov	r6, r7
 8003498:	6165      	str	r5, [r4, #20]
 800349a:	eba5 0509 	sub.w	r5, r5, r9
 800349e:	60a5      	str	r5, [r4, #8]
 80034a0:	42be      	cmp	r6, r7
 80034a2:	d900      	bls.n	80034a6 <__ssputs_r+0x72>
 80034a4:	463e      	mov	r6, r7
 80034a6:	4632      	mov	r2, r6
 80034a8:	4641      	mov	r1, r8
 80034aa:	6820      	ldr	r0, [r4, #0]
 80034ac:	f000 faac 	bl	8003a08 <memmove>
 80034b0:	2000      	movs	r0, #0
 80034b2:	68a3      	ldr	r3, [r4, #8]
 80034b4:	1b9b      	subs	r3, r3, r6
 80034b6:	60a3      	str	r3, [r4, #8]
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	4433      	add	r3, r6
 80034bc:	6023      	str	r3, [r4, #0]
 80034be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c2:	462a      	mov	r2, r5
 80034c4:	f000 fae6 	bl	8003a94 <_realloc_r>
 80034c8:	4606      	mov	r6, r0
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d1e0      	bne.n	8003490 <__ssputs_r+0x5c>
 80034ce:	4650      	mov	r0, sl
 80034d0:	6921      	ldr	r1, [r4, #16]
 80034d2:	f7ff feb9 	bl	8003248 <_free_r>
 80034d6:	230c      	movs	r3, #12
 80034d8:	f8ca 3000 	str.w	r3, [sl]
 80034dc:	89a3      	ldrh	r3, [r4, #12]
 80034de:	f04f 30ff 	mov.w	r0, #4294967295
 80034e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034e6:	81a3      	strh	r3, [r4, #12]
 80034e8:	e7e9      	b.n	80034be <__ssputs_r+0x8a>
	...

080034ec <_svfiprintf_r>:
 80034ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f0:	4698      	mov	r8, r3
 80034f2:	898b      	ldrh	r3, [r1, #12]
 80034f4:	4607      	mov	r7, r0
 80034f6:	061b      	lsls	r3, r3, #24
 80034f8:	460d      	mov	r5, r1
 80034fa:	4614      	mov	r4, r2
 80034fc:	b09d      	sub	sp, #116	@ 0x74
 80034fe:	d510      	bpl.n	8003522 <_svfiprintf_r+0x36>
 8003500:	690b      	ldr	r3, [r1, #16]
 8003502:	b973      	cbnz	r3, 8003522 <_svfiprintf_r+0x36>
 8003504:	2140      	movs	r1, #64	@ 0x40
 8003506:	f7ff ff09 	bl	800331c <_malloc_r>
 800350a:	6028      	str	r0, [r5, #0]
 800350c:	6128      	str	r0, [r5, #16]
 800350e:	b930      	cbnz	r0, 800351e <_svfiprintf_r+0x32>
 8003510:	230c      	movs	r3, #12
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	b01d      	add	sp, #116	@ 0x74
 800351a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800351e:	2340      	movs	r3, #64	@ 0x40
 8003520:	616b      	str	r3, [r5, #20]
 8003522:	2300      	movs	r3, #0
 8003524:	9309      	str	r3, [sp, #36]	@ 0x24
 8003526:	2320      	movs	r3, #32
 8003528:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800352c:	2330      	movs	r3, #48	@ 0x30
 800352e:	f04f 0901 	mov.w	r9, #1
 8003532:	f8cd 800c 	str.w	r8, [sp, #12]
 8003536:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80036d0 <_svfiprintf_r+0x1e4>
 800353a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800353e:	4623      	mov	r3, r4
 8003540:	469a      	mov	sl, r3
 8003542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003546:	b10a      	cbz	r2, 800354c <_svfiprintf_r+0x60>
 8003548:	2a25      	cmp	r2, #37	@ 0x25
 800354a:	d1f9      	bne.n	8003540 <_svfiprintf_r+0x54>
 800354c:	ebba 0b04 	subs.w	fp, sl, r4
 8003550:	d00b      	beq.n	800356a <_svfiprintf_r+0x7e>
 8003552:	465b      	mov	r3, fp
 8003554:	4622      	mov	r2, r4
 8003556:	4629      	mov	r1, r5
 8003558:	4638      	mov	r0, r7
 800355a:	f7ff ff6b 	bl	8003434 <__ssputs_r>
 800355e:	3001      	adds	r0, #1
 8003560:	f000 80a7 	beq.w	80036b2 <_svfiprintf_r+0x1c6>
 8003564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003566:	445a      	add	r2, fp
 8003568:	9209      	str	r2, [sp, #36]	@ 0x24
 800356a:	f89a 3000 	ldrb.w	r3, [sl]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 809f 	beq.w	80036b2 <_svfiprintf_r+0x1c6>
 8003574:	2300      	movs	r3, #0
 8003576:	f04f 32ff 	mov.w	r2, #4294967295
 800357a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800357e:	f10a 0a01 	add.w	sl, sl, #1
 8003582:	9304      	str	r3, [sp, #16]
 8003584:	9307      	str	r3, [sp, #28]
 8003586:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800358a:	931a      	str	r3, [sp, #104]	@ 0x68
 800358c:	4654      	mov	r4, sl
 800358e:	2205      	movs	r2, #5
 8003590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003594:	484e      	ldr	r0, [pc, #312]	@ (80036d0 <_svfiprintf_r+0x1e4>)
 8003596:	f000 fa61 	bl	8003a5c <memchr>
 800359a:	9a04      	ldr	r2, [sp, #16]
 800359c:	b9d8      	cbnz	r0, 80035d6 <_svfiprintf_r+0xea>
 800359e:	06d0      	lsls	r0, r2, #27
 80035a0:	bf44      	itt	mi
 80035a2:	2320      	movmi	r3, #32
 80035a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035a8:	0711      	lsls	r1, r2, #28
 80035aa:	bf44      	itt	mi
 80035ac:	232b      	movmi	r3, #43	@ 0x2b
 80035ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035b2:	f89a 3000 	ldrb.w	r3, [sl]
 80035b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80035b8:	d015      	beq.n	80035e6 <_svfiprintf_r+0xfa>
 80035ba:	4654      	mov	r4, sl
 80035bc:	2000      	movs	r0, #0
 80035be:	f04f 0c0a 	mov.w	ip, #10
 80035c2:	9a07      	ldr	r2, [sp, #28]
 80035c4:	4621      	mov	r1, r4
 80035c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035ca:	3b30      	subs	r3, #48	@ 0x30
 80035cc:	2b09      	cmp	r3, #9
 80035ce:	d94b      	bls.n	8003668 <_svfiprintf_r+0x17c>
 80035d0:	b1b0      	cbz	r0, 8003600 <_svfiprintf_r+0x114>
 80035d2:	9207      	str	r2, [sp, #28]
 80035d4:	e014      	b.n	8003600 <_svfiprintf_r+0x114>
 80035d6:	eba0 0308 	sub.w	r3, r0, r8
 80035da:	fa09 f303 	lsl.w	r3, r9, r3
 80035de:	4313      	orrs	r3, r2
 80035e0:	46a2      	mov	sl, r4
 80035e2:	9304      	str	r3, [sp, #16]
 80035e4:	e7d2      	b.n	800358c <_svfiprintf_r+0xa0>
 80035e6:	9b03      	ldr	r3, [sp, #12]
 80035e8:	1d19      	adds	r1, r3, #4
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	9103      	str	r1, [sp, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bfbb      	ittet	lt
 80035f2:	425b      	neglt	r3, r3
 80035f4:	f042 0202 	orrlt.w	r2, r2, #2
 80035f8:	9307      	strge	r3, [sp, #28]
 80035fa:	9307      	strlt	r3, [sp, #28]
 80035fc:	bfb8      	it	lt
 80035fe:	9204      	strlt	r2, [sp, #16]
 8003600:	7823      	ldrb	r3, [r4, #0]
 8003602:	2b2e      	cmp	r3, #46	@ 0x2e
 8003604:	d10a      	bne.n	800361c <_svfiprintf_r+0x130>
 8003606:	7863      	ldrb	r3, [r4, #1]
 8003608:	2b2a      	cmp	r3, #42	@ 0x2a
 800360a:	d132      	bne.n	8003672 <_svfiprintf_r+0x186>
 800360c:	9b03      	ldr	r3, [sp, #12]
 800360e:	3402      	adds	r4, #2
 8003610:	1d1a      	adds	r2, r3, #4
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	9203      	str	r2, [sp, #12]
 8003616:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800361a:	9305      	str	r3, [sp, #20]
 800361c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80036d4 <_svfiprintf_r+0x1e8>
 8003620:	2203      	movs	r2, #3
 8003622:	4650      	mov	r0, sl
 8003624:	7821      	ldrb	r1, [r4, #0]
 8003626:	f000 fa19 	bl	8003a5c <memchr>
 800362a:	b138      	cbz	r0, 800363c <_svfiprintf_r+0x150>
 800362c:	2240      	movs	r2, #64	@ 0x40
 800362e:	9b04      	ldr	r3, [sp, #16]
 8003630:	eba0 000a 	sub.w	r0, r0, sl
 8003634:	4082      	lsls	r2, r0
 8003636:	4313      	orrs	r3, r2
 8003638:	3401      	adds	r4, #1
 800363a:	9304      	str	r3, [sp, #16]
 800363c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003640:	2206      	movs	r2, #6
 8003642:	4825      	ldr	r0, [pc, #148]	@ (80036d8 <_svfiprintf_r+0x1ec>)
 8003644:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003648:	f000 fa08 	bl	8003a5c <memchr>
 800364c:	2800      	cmp	r0, #0
 800364e:	d036      	beq.n	80036be <_svfiprintf_r+0x1d2>
 8003650:	4b22      	ldr	r3, [pc, #136]	@ (80036dc <_svfiprintf_r+0x1f0>)
 8003652:	bb1b      	cbnz	r3, 800369c <_svfiprintf_r+0x1b0>
 8003654:	9b03      	ldr	r3, [sp, #12]
 8003656:	3307      	adds	r3, #7
 8003658:	f023 0307 	bic.w	r3, r3, #7
 800365c:	3308      	adds	r3, #8
 800365e:	9303      	str	r3, [sp, #12]
 8003660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003662:	4433      	add	r3, r6
 8003664:	9309      	str	r3, [sp, #36]	@ 0x24
 8003666:	e76a      	b.n	800353e <_svfiprintf_r+0x52>
 8003668:	460c      	mov	r4, r1
 800366a:	2001      	movs	r0, #1
 800366c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003670:	e7a8      	b.n	80035c4 <_svfiprintf_r+0xd8>
 8003672:	2300      	movs	r3, #0
 8003674:	f04f 0c0a 	mov.w	ip, #10
 8003678:	4619      	mov	r1, r3
 800367a:	3401      	adds	r4, #1
 800367c:	9305      	str	r3, [sp, #20]
 800367e:	4620      	mov	r0, r4
 8003680:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003684:	3a30      	subs	r2, #48	@ 0x30
 8003686:	2a09      	cmp	r2, #9
 8003688:	d903      	bls.n	8003692 <_svfiprintf_r+0x1a6>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0c6      	beq.n	800361c <_svfiprintf_r+0x130>
 800368e:	9105      	str	r1, [sp, #20]
 8003690:	e7c4      	b.n	800361c <_svfiprintf_r+0x130>
 8003692:	4604      	mov	r4, r0
 8003694:	2301      	movs	r3, #1
 8003696:	fb0c 2101 	mla	r1, ip, r1, r2
 800369a:	e7f0      	b.n	800367e <_svfiprintf_r+0x192>
 800369c:	ab03      	add	r3, sp, #12
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	462a      	mov	r2, r5
 80036a2:	4638      	mov	r0, r7
 80036a4:	4b0e      	ldr	r3, [pc, #56]	@ (80036e0 <_svfiprintf_r+0x1f4>)
 80036a6:	a904      	add	r1, sp, #16
 80036a8:	f3af 8000 	nop.w
 80036ac:	1c42      	adds	r2, r0, #1
 80036ae:	4606      	mov	r6, r0
 80036b0:	d1d6      	bne.n	8003660 <_svfiprintf_r+0x174>
 80036b2:	89ab      	ldrh	r3, [r5, #12]
 80036b4:	065b      	lsls	r3, r3, #25
 80036b6:	f53f af2d 	bmi.w	8003514 <_svfiprintf_r+0x28>
 80036ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80036bc:	e72c      	b.n	8003518 <_svfiprintf_r+0x2c>
 80036be:	ab03      	add	r3, sp, #12
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	462a      	mov	r2, r5
 80036c4:	4638      	mov	r0, r7
 80036c6:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <_svfiprintf_r+0x1f4>)
 80036c8:	a904      	add	r1, sp, #16
 80036ca:	f000 f87d 	bl	80037c8 <_printf_i>
 80036ce:	e7ed      	b.n	80036ac <_svfiprintf_r+0x1c0>
 80036d0:	080048a6 	.word	0x080048a6
 80036d4:	080048ac 	.word	0x080048ac
 80036d8:	080048b0 	.word	0x080048b0
 80036dc:	00000000 	.word	0x00000000
 80036e0:	08003435 	.word	0x08003435

080036e4 <_printf_common>:
 80036e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e8:	4616      	mov	r6, r2
 80036ea:	4698      	mov	r8, r3
 80036ec:	688a      	ldr	r2, [r1, #8]
 80036ee:	690b      	ldr	r3, [r1, #16]
 80036f0:	4607      	mov	r7, r0
 80036f2:	4293      	cmp	r3, r2
 80036f4:	bfb8      	it	lt
 80036f6:	4613      	movlt	r3, r2
 80036f8:	6033      	str	r3, [r6, #0]
 80036fa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036fe:	460c      	mov	r4, r1
 8003700:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003704:	b10a      	cbz	r2, 800370a <_printf_common+0x26>
 8003706:	3301      	adds	r3, #1
 8003708:	6033      	str	r3, [r6, #0]
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	0699      	lsls	r1, r3, #26
 800370e:	bf42      	ittt	mi
 8003710:	6833      	ldrmi	r3, [r6, #0]
 8003712:	3302      	addmi	r3, #2
 8003714:	6033      	strmi	r3, [r6, #0]
 8003716:	6825      	ldr	r5, [r4, #0]
 8003718:	f015 0506 	ands.w	r5, r5, #6
 800371c:	d106      	bne.n	800372c <_printf_common+0x48>
 800371e:	f104 0a19 	add.w	sl, r4, #25
 8003722:	68e3      	ldr	r3, [r4, #12]
 8003724:	6832      	ldr	r2, [r6, #0]
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	42ab      	cmp	r3, r5
 800372a:	dc2b      	bgt.n	8003784 <_printf_common+0xa0>
 800372c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003730:	6822      	ldr	r2, [r4, #0]
 8003732:	3b00      	subs	r3, #0
 8003734:	bf18      	it	ne
 8003736:	2301      	movne	r3, #1
 8003738:	0692      	lsls	r2, r2, #26
 800373a:	d430      	bmi.n	800379e <_printf_common+0xba>
 800373c:	4641      	mov	r1, r8
 800373e:	4638      	mov	r0, r7
 8003740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003744:	47c8      	blx	r9
 8003746:	3001      	adds	r0, #1
 8003748:	d023      	beq.n	8003792 <_printf_common+0xae>
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	6922      	ldr	r2, [r4, #16]
 800374e:	f003 0306 	and.w	r3, r3, #6
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf14      	ite	ne
 8003756:	2500      	movne	r5, #0
 8003758:	6833      	ldreq	r3, [r6, #0]
 800375a:	f04f 0600 	mov.w	r6, #0
 800375e:	bf08      	it	eq
 8003760:	68e5      	ldreq	r5, [r4, #12]
 8003762:	f104 041a 	add.w	r4, r4, #26
 8003766:	bf08      	it	eq
 8003768:	1aed      	subeq	r5, r5, r3
 800376a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800376e:	bf08      	it	eq
 8003770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003774:	4293      	cmp	r3, r2
 8003776:	bfc4      	itt	gt
 8003778:	1a9b      	subgt	r3, r3, r2
 800377a:	18ed      	addgt	r5, r5, r3
 800377c:	42b5      	cmp	r5, r6
 800377e:	d11a      	bne.n	80037b6 <_printf_common+0xd2>
 8003780:	2000      	movs	r0, #0
 8003782:	e008      	b.n	8003796 <_printf_common+0xb2>
 8003784:	2301      	movs	r3, #1
 8003786:	4652      	mov	r2, sl
 8003788:	4641      	mov	r1, r8
 800378a:	4638      	mov	r0, r7
 800378c:	47c8      	blx	r9
 800378e:	3001      	adds	r0, #1
 8003790:	d103      	bne.n	800379a <_printf_common+0xb6>
 8003792:	f04f 30ff 	mov.w	r0, #4294967295
 8003796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800379a:	3501      	adds	r5, #1
 800379c:	e7c1      	b.n	8003722 <_printf_common+0x3e>
 800379e:	2030      	movs	r0, #48	@ 0x30
 80037a0:	18e1      	adds	r1, r4, r3
 80037a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80037ac:	4422      	add	r2, r4
 80037ae:	3302      	adds	r3, #2
 80037b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80037b4:	e7c2      	b.n	800373c <_printf_common+0x58>
 80037b6:	2301      	movs	r3, #1
 80037b8:	4622      	mov	r2, r4
 80037ba:	4641      	mov	r1, r8
 80037bc:	4638      	mov	r0, r7
 80037be:	47c8      	blx	r9
 80037c0:	3001      	adds	r0, #1
 80037c2:	d0e6      	beq.n	8003792 <_printf_common+0xae>
 80037c4:	3601      	adds	r6, #1
 80037c6:	e7d9      	b.n	800377c <_printf_common+0x98>

080037c8 <_printf_i>:
 80037c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037cc:	7e0f      	ldrb	r7, [r1, #24]
 80037ce:	4691      	mov	r9, r2
 80037d0:	2f78      	cmp	r7, #120	@ 0x78
 80037d2:	4680      	mov	r8, r0
 80037d4:	460c      	mov	r4, r1
 80037d6:	469a      	mov	sl, r3
 80037d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037de:	d807      	bhi.n	80037f0 <_printf_i+0x28>
 80037e0:	2f62      	cmp	r7, #98	@ 0x62
 80037e2:	d80a      	bhi.n	80037fa <_printf_i+0x32>
 80037e4:	2f00      	cmp	r7, #0
 80037e6:	f000 80d3 	beq.w	8003990 <_printf_i+0x1c8>
 80037ea:	2f58      	cmp	r7, #88	@ 0x58
 80037ec:	f000 80ba 	beq.w	8003964 <_printf_i+0x19c>
 80037f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037f8:	e03a      	b.n	8003870 <_printf_i+0xa8>
 80037fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037fe:	2b15      	cmp	r3, #21
 8003800:	d8f6      	bhi.n	80037f0 <_printf_i+0x28>
 8003802:	a101      	add	r1, pc, #4	@ (adr r1, 8003808 <_printf_i+0x40>)
 8003804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003808:	08003861 	.word	0x08003861
 800380c:	08003875 	.word	0x08003875
 8003810:	080037f1 	.word	0x080037f1
 8003814:	080037f1 	.word	0x080037f1
 8003818:	080037f1 	.word	0x080037f1
 800381c:	080037f1 	.word	0x080037f1
 8003820:	08003875 	.word	0x08003875
 8003824:	080037f1 	.word	0x080037f1
 8003828:	080037f1 	.word	0x080037f1
 800382c:	080037f1 	.word	0x080037f1
 8003830:	080037f1 	.word	0x080037f1
 8003834:	08003977 	.word	0x08003977
 8003838:	0800389f 	.word	0x0800389f
 800383c:	08003931 	.word	0x08003931
 8003840:	080037f1 	.word	0x080037f1
 8003844:	080037f1 	.word	0x080037f1
 8003848:	08003999 	.word	0x08003999
 800384c:	080037f1 	.word	0x080037f1
 8003850:	0800389f 	.word	0x0800389f
 8003854:	080037f1 	.word	0x080037f1
 8003858:	080037f1 	.word	0x080037f1
 800385c:	08003939 	.word	0x08003939
 8003860:	6833      	ldr	r3, [r6, #0]
 8003862:	1d1a      	adds	r2, r3, #4
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6032      	str	r2, [r6, #0]
 8003868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800386c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003870:	2301      	movs	r3, #1
 8003872:	e09e      	b.n	80039b2 <_printf_i+0x1ea>
 8003874:	6833      	ldr	r3, [r6, #0]
 8003876:	6820      	ldr	r0, [r4, #0]
 8003878:	1d19      	adds	r1, r3, #4
 800387a:	6031      	str	r1, [r6, #0]
 800387c:	0606      	lsls	r6, r0, #24
 800387e:	d501      	bpl.n	8003884 <_printf_i+0xbc>
 8003880:	681d      	ldr	r5, [r3, #0]
 8003882:	e003      	b.n	800388c <_printf_i+0xc4>
 8003884:	0645      	lsls	r5, r0, #25
 8003886:	d5fb      	bpl.n	8003880 <_printf_i+0xb8>
 8003888:	f9b3 5000 	ldrsh.w	r5, [r3]
 800388c:	2d00      	cmp	r5, #0
 800388e:	da03      	bge.n	8003898 <_printf_i+0xd0>
 8003890:	232d      	movs	r3, #45	@ 0x2d
 8003892:	426d      	negs	r5, r5
 8003894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003898:	230a      	movs	r3, #10
 800389a:	4859      	ldr	r0, [pc, #356]	@ (8003a00 <_printf_i+0x238>)
 800389c:	e011      	b.n	80038c2 <_printf_i+0xfa>
 800389e:	6821      	ldr	r1, [r4, #0]
 80038a0:	6833      	ldr	r3, [r6, #0]
 80038a2:	0608      	lsls	r0, r1, #24
 80038a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80038a8:	d402      	bmi.n	80038b0 <_printf_i+0xe8>
 80038aa:	0649      	lsls	r1, r1, #25
 80038ac:	bf48      	it	mi
 80038ae:	b2ad      	uxthmi	r5, r5
 80038b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80038b2:	6033      	str	r3, [r6, #0]
 80038b4:	bf14      	ite	ne
 80038b6:	230a      	movne	r3, #10
 80038b8:	2308      	moveq	r3, #8
 80038ba:	4851      	ldr	r0, [pc, #324]	@ (8003a00 <_printf_i+0x238>)
 80038bc:	2100      	movs	r1, #0
 80038be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038c2:	6866      	ldr	r6, [r4, #4]
 80038c4:	2e00      	cmp	r6, #0
 80038c6:	bfa8      	it	ge
 80038c8:	6821      	ldrge	r1, [r4, #0]
 80038ca:	60a6      	str	r6, [r4, #8]
 80038cc:	bfa4      	itt	ge
 80038ce:	f021 0104 	bicge.w	r1, r1, #4
 80038d2:	6021      	strge	r1, [r4, #0]
 80038d4:	b90d      	cbnz	r5, 80038da <_printf_i+0x112>
 80038d6:	2e00      	cmp	r6, #0
 80038d8:	d04b      	beq.n	8003972 <_printf_i+0x1aa>
 80038da:	4616      	mov	r6, r2
 80038dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80038e0:	fb03 5711 	mls	r7, r3, r1, r5
 80038e4:	5dc7      	ldrb	r7, [r0, r7]
 80038e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038ea:	462f      	mov	r7, r5
 80038ec:	42bb      	cmp	r3, r7
 80038ee:	460d      	mov	r5, r1
 80038f0:	d9f4      	bls.n	80038dc <_printf_i+0x114>
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d10b      	bne.n	800390e <_printf_i+0x146>
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	07df      	lsls	r7, r3, #31
 80038fa:	d508      	bpl.n	800390e <_printf_i+0x146>
 80038fc:	6923      	ldr	r3, [r4, #16]
 80038fe:	6861      	ldr	r1, [r4, #4]
 8003900:	4299      	cmp	r1, r3
 8003902:	bfde      	ittt	le
 8003904:	2330      	movle	r3, #48	@ 0x30
 8003906:	f806 3c01 	strble.w	r3, [r6, #-1]
 800390a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800390e:	1b92      	subs	r2, r2, r6
 8003910:	6122      	str	r2, [r4, #16]
 8003912:	464b      	mov	r3, r9
 8003914:	4621      	mov	r1, r4
 8003916:	4640      	mov	r0, r8
 8003918:	f8cd a000 	str.w	sl, [sp]
 800391c:	aa03      	add	r2, sp, #12
 800391e:	f7ff fee1 	bl	80036e4 <_printf_common>
 8003922:	3001      	adds	r0, #1
 8003924:	d14a      	bne.n	80039bc <_printf_i+0x1f4>
 8003926:	f04f 30ff 	mov.w	r0, #4294967295
 800392a:	b004      	add	sp, #16
 800392c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	f043 0320 	orr.w	r3, r3, #32
 8003936:	6023      	str	r3, [r4, #0]
 8003938:	2778      	movs	r7, #120	@ 0x78
 800393a:	4832      	ldr	r0, [pc, #200]	@ (8003a04 <_printf_i+0x23c>)
 800393c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	6831      	ldr	r1, [r6, #0]
 8003944:	061f      	lsls	r7, r3, #24
 8003946:	f851 5b04 	ldr.w	r5, [r1], #4
 800394a:	d402      	bmi.n	8003952 <_printf_i+0x18a>
 800394c:	065f      	lsls	r7, r3, #25
 800394e:	bf48      	it	mi
 8003950:	b2ad      	uxthmi	r5, r5
 8003952:	6031      	str	r1, [r6, #0]
 8003954:	07d9      	lsls	r1, r3, #31
 8003956:	bf44      	itt	mi
 8003958:	f043 0320 	orrmi.w	r3, r3, #32
 800395c:	6023      	strmi	r3, [r4, #0]
 800395e:	b11d      	cbz	r5, 8003968 <_printf_i+0x1a0>
 8003960:	2310      	movs	r3, #16
 8003962:	e7ab      	b.n	80038bc <_printf_i+0xf4>
 8003964:	4826      	ldr	r0, [pc, #152]	@ (8003a00 <_printf_i+0x238>)
 8003966:	e7e9      	b.n	800393c <_printf_i+0x174>
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	f023 0320 	bic.w	r3, r3, #32
 800396e:	6023      	str	r3, [r4, #0]
 8003970:	e7f6      	b.n	8003960 <_printf_i+0x198>
 8003972:	4616      	mov	r6, r2
 8003974:	e7bd      	b.n	80038f2 <_printf_i+0x12a>
 8003976:	6833      	ldr	r3, [r6, #0]
 8003978:	6825      	ldr	r5, [r4, #0]
 800397a:	1d18      	adds	r0, r3, #4
 800397c:	6961      	ldr	r1, [r4, #20]
 800397e:	6030      	str	r0, [r6, #0]
 8003980:	062e      	lsls	r6, r5, #24
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	d501      	bpl.n	800398a <_printf_i+0x1c2>
 8003986:	6019      	str	r1, [r3, #0]
 8003988:	e002      	b.n	8003990 <_printf_i+0x1c8>
 800398a:	0668      	lsls	r0, r5, #25
 800398c:	d5fb      	bpl.n	8003986 <_printf_i+0x1be>
 800398e:	8019      	strh	r1, [r3, #0]
 8003990:	2300      	movs	r3, #0
 8003992:	4616      	mov	r6, r2
 8003994:	6123      	str	r3, [r4, #16]
 8003996:	e7bc      	b.n	8003912 <_printf_i+0x14a>
 8003998:	6833      	ldr	r3, [r6, #0]
 800399a:	2100      	movs	r1, #0
 800399c:	1d1a      	adds	r2, r3, #4
 800399e:	6032      	str	r2, [r6, #0]
 80039a0:	681e      	ldr	r6, [r3, #0]
 80039a2:	6862      	ldr	r2, [r4, #4]
 80039a4:	4630      	mov	r0, r6
 80039a6:	f000 f859 	bl	8003a5c <memchr>
 80039aa:	b108      	cbz	r0, 80039b0 <_printf_i+0x1e8>
 80039ac:	1b80      	subs	r0, r0, r6
 80039ae:	6060      	str	r0, [r4, #4]
 80039b0:	6863      	ldr	r3, [r4, #4]
 80039b2:	6123      	str	r3, [r4, #16]
 80039b4:	2300      	movs	r3, #0
 80039b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039ba:	e7aa      	b.n	8003912 <_printf_i+0x14a>
 80039bc:	4632      	mov	r2, r6
 80039be:	4649      	mov	r1, r9
 80039c0:	4640      	mov	r0, r8
 80039c2:	6923      	ldr	r3, [r4, #16]
 80039c4:	47d0      	blx	sl
 80039c6:	3001      	adds	r0, #1
 80039c8:	d0ad      	beq.n	8003926 <_printf_i+0x15e>
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	079b      	lsls	r3, r3, #30
 80039ce:	d413      	bmi.n	80039f8 <_printf_i+0x230>
 80039d0:	68e0      	ldr	r0, [r4, #12]
 80039d2:	9b03      	ldr	r3, [sp, #12]
 80039d4:	4298      	cmp	r0, r3
 80039d6:	bfb8      	it	lt
 80039d8:	4618      	movlt	r0, r3
 80039da:	e7a6      	b.n	800392a <_printf_i+0x162>
 80039dc:	2301      	movs	r3, #1
 80039de:	4632      	mov	r2, r6
 80039e0:	4649      	mov	r1, r9
 80039e2:	4640      	mov	r0, r8
 80039e4:	47d0      	blx	sl
 80039e6:	3001      	adds	r0, #1
 80039e8:	d09d      	beq.n	8003926 <_printf_i+0x15e>
 80039ea:	3501      	adds	r5, #1
 80039ec:	68e3      	ldr	r3, [r4, #12]
 80039ee:	9903      	ldr	r1, [sp, #12]
 80039f0:	1a5b      	subs	r3, r3, r1
 80039f2:	42ab      	cmp	r3, r5
 80039f4:	dcf2      	bgt.n	80039dc <_printf_i+0x214>
 80039f6:	e7eb      	b.n	80039d0 <_printf_i+0x208>
 80039f8:	2500      	movs	r5, #0
 80039fa:	f104 0619 	add.w	r6, r4, #25
 80039fe:	e7f5      	b.n	80039ec <_printf_i+0x224>
 8003a00:	080048b7 	.word	0x080048b7
 8003a04:	080048c8 	.word	0x080048c8

08003a08 <memmove>:
 8003a08:	4288      	cmp	r0, r1
 8003a0a:	b510      	push	{r4, lr}
 8003a0c:	eb01 0402 	add.w	r4, r1, r2
 8003a10:	d902      	bls.n	8003a18 <memmove+0x10>
 8003a12:	4284      	cmp	r4, r0
 8003a14:	4623      	mov	r3, r4
 8003a16:	d807      	bhi.n	8003a28 <memmove+0x20>
 8003a18:	1e43      	subs	r3, r0, #1
 8003a1a:	42a1      	cmp	r1, r4
 8003a1c:	d008      	beq.n	8003a30 <memmove+0x28>
 8003a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a26:	e7f8      	b.n	8003a1a <memmove+0x12>
 8003a28:	4601      	mov	r1, r0
 8003a2a:	4402      	add	r2, r0
 8003a2c:	428a      	cmp	r2, r1
 8003a2e:	d100      	bne.n	8003a32 <memmove+0x2a>
 8003a30:	bd10      	pop	{r4, pc}
 8003a32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a3a:	e7f7      	b.n	8003a2c <memmove+0x24>

08003a3c <_sbrk_r>:
 8003a3c:	b538      	push	{r3, r4, r5, lr}
 8003a3e:	2300      	movs	r3, #0
 8003a40:	4d05      	ldr	r5, [pc, #20]	@ (8003a58 <_sbrk_r+0x1c>)
 8003a42:	4604      	mov	r4, r0
 8003a44:	4608      	mov	r0, r1
 8003a46:	602b      	str	r3, [r5, #0]
 8003a48:	f7fd fcbe 	bl	80013c8 <_sbrk>
 8003a4c:	1c43      	adds	r3, r0, #1
 8003a4e:	d102      	bne.n	8003a56 <_sbrk_r+0x1a>
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	b103      	cbz	r3, 8003a56 <_sbrk_r+0x1a>
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	bd38      	pop	{r3, r4, r5, pc}
 8003a58:	20000690 	.word	0x20000690

08003a5c <memchr>:
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	b510      	push	{r4, lr}
 8003a60:	b2c9      	uxtb	r1, r1
 8003a62:	4402      	add	r2, r0
 8003a64:	4293      	cmp	r3, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	d101      	bne.n	8003a6e <memchr+0x12>
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	e003      	b.n	8003a76 <memchr+0x1a>
 8003a6e:	7804      	ldrb	r4, [r0, #0]
 8003a70:	3301      	adds	r3, #1
 8003a72:	428c      	cmp	r4, r1
 8003a74:	d1f6      	bne.n	8003a64 <memchr+0x8>
 8003a76:	bd10      	pop	{r4, pc}

08003a78 <memcpy>:
 8003a78:	440a      	add	r2, r1
 8003a7a:	4291      	cmp	r1, r2
 8003a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a80:	d100      	bne.n	8003a84 <memcpy+0xc>
 8003a82:	4770      	bx	lr
 8003a84:	b510      	push	{r4, lr}
 8003a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a8a:	4291      	cmp	r1, r2
 8003a8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a90:	d1f9      	bne.n	8003a86 <memcpy+0xe>
 8003a92:	bd10      	pop	{r4, pc}

08003a94 <_realloc_r>:
 8003a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a98:	4680      	mov	r8, r0
 8003a9a:	4615      	mov	r5, r2
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	b921      	cbnz	r1, 8003aaa <_realloc_r+0x16>
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa6:	f7ff bc39 	b.w	800331c <_malloc_r>
 8003aaa:	b92a      	cbnz	r2, 8003ab8 <_realloc_r+0x24>
 8003aac:	f7ff fbcc 	bl	8003248 <_free_r>
 8003ab0:	2400      	movs	r4, #0
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab8:	f000 f81a 	bl	8003af0 <_malloc_usable_size_r>
 8003abc:	4285      	cmp	r5, r0
 8003abe:	4606      	mov	r6, r0
 8003ac0:	d802      	bhi.n	8003ac8 <_realloc_r+0x34>
 8003ac2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003ac6:	d8f4      	bhi.n	8003ab2 <_realloc_r+0x1e>
 8003ac8:	4629      	mov	r1, r5
 8003aca:	4640      	mov	r0, r8
 8003acc:	f7ff fc26 	bl	800331c <_malloc_r>
 8003ad0:	4607      	mov	r7, r0
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d0ec      	beq.n	8003ab0 <_realloc_r+0x1c>
 8003ad6:	42b5      	cmp	r5, r6
 8003ad8:	462a      	mov	r2, r5
 8003ada:	4621      	mov	r1, r4
 8003adc:	bf28      	it	cs
 8003ade:	4632      	movcs	r2, r6
 8003ae0:	f7ff ffca 	bl	8003a78 <memcpy>
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	f7ff fbae 	bl	8003248 <_free_r>
 8003aec:	463c      	mov	r4, r7
 8003aee:	e7e0      	b.n	8003ab2 <_realloc_r+0x1e>

08003af0 <_malloc_usable_size_r>:
 8003af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003af4:	1f18      	subs	r0, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bfbc      	itt	lt
 8003afa:	580b      	ldrlt	r3, [r1, r0]
 8003afc:	18c0      	addlt	r0, r0, r3
 8003afe:	4770      	bx	lr

08003b00 <_init>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr

08003b0c <_fini>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr
